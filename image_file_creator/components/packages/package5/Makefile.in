#
# Makefile.in $Revision: 56599 $
#
# This file specifies the version numbers of Linux, Video, and Audio.
#

# If you set customer ID here, you can force to pack install.img for a customer
CUSTOMER_ID=

$(info =>=>=>=>=> In package5/Makefile.in, layout_type=$(layout_type))
$(info =>=>=>=>=> In package5/Makefile.in, layout_size=$(layout_size))

# If "nosvn=0", check out all of the components, which mean Audio/Video/Linux Images, from the svn server; if "nosvn=1", use the components residing in the directory.
install_ap=0

# LINUX_IMAGE_LOCATION and AV_IMAGE_LOCATION indicate the SVN location of Linux and A/V Images.
# If they are left empty, it means that images are checked in the corresponding components directory.
# If LINUX_IMAGE_LOCATION has value, LAYOUT and PROJECT_NAME both need to have values, too, or else problems will happen.
LINUX_IMAGE_LOCATION=
LAYOUT=
PROJECT_NAME=
AV_IMAGE_LOCATION=http://cadinfo/svn/col/DVR/jupiter/software/system/flash_environment/develop/image_file/components

# 'AV_IN_ROOT' is only workable for 'LAYOUT=hd'. If the value is 'y', Audio and Video firmware will be put in root and loaded by RootApp.
AV_IN_ROOT=n

LINUXREV=HEAD		#Linux SVN rev.
VIDEOREV=HEAD		#Video SVN rev. 
AUDIOREV=HEAD		#Audio SVN rev.

# If these variables have values, we will embed them, instead of svn version,  into XML file
AUDIOVER=
VIDEOVER=
LINUXVER=
PACKAGEVER=

# These store the descriptions
PACKAGE_DESCRIPTION=This is nand solution with android
ANDROID_IMGS=y

# This indicates the firmware URL of internet updating
LIVEUPDATE_URL=

# If this is 'y', image file packer will encrypt uImage, fw, android rootfs and rescue rootfs for security boot.
SECURE_BOOT=n

# For platform using Nand flash, it can use squashfs partition as root for saving size.
SQUASHFS_ROOT=n

# The minimum size of partition on android @ /system ( The unit is byte ). 0 for use remainder flash space
HAS_SYSTEM_IMG=y
#SYSTEM_TYPE=squashfs
#SYSTEM_TYPE=yaffs2
#ifeq ($(layout_type), nand)
#SYSTEM_TYPE=ubifs
#SYSTEM_MINSIZE=734003200 
#UBIFS_SYSTEMIMG=ubi_system.img 
#else
#SYSTEM_TYPE=ext4fs
#SYSTEM_MINSIZE=734003200 
#EXT4FS_SYSTEMIMG=system.bin
#endif

# The minimum size of partition on android @ /data ( The unit is byte ).
HAS_DATA_IMG=y
#DATA_TYPE=squashfs
#DATA_TYPE=yaffs2
#ifeq ($(layout_type), nand)
#DATA_TYPE=ubifs
#DATA_MINSIZE=6710886400 
#UBIFS_DATAIMG=ubi_data.img 
#else
#DATA_TYPE=ext4fs
#ifeq ($(layout_size), 4gb)
#DATA_MINSIZE=2516582400
#else
#DATA_MINSIZE=6710886400 
#endif
#EXT4FS_DATAIMG=data.bin
#endif

# The flash filesystem type of /usr/local/etc .
#ETC_FS_TYPE=yaffs2
#ETC_FS_TYPE=ext4
#ETC_FS_TYPE=ubifs
ETC_FS_TYPE=none

# The minimum size of partition on /usr/local/etc ( The unit is byte ).
HAS_ETC_IMG=n
#ETC_SIZE=1048576		# (1024 MB)
#ETC_MINSIZE=262144 # Reserve at least 256MB for /usr/local/etc
#UBIFS_ETCIMG=ubifs_etc.img

# The flash filesystem type of android @ /cache ( The unit is byte ).
#ifeq ($(layout_type), nand)
#CACHE_TYPE=ubifs
#CACHE_MINSIZE=314572800 
#UBIFS_CACHEIMG=ubi_cache.img 
#else
#CACHE_TYPE=ext4fs
#CACHE_MINSIZE=314572800 
#EXT4FS_CACHEIMG=cache.bin
#endif

# The flash filesystem type of /res ( The unit is byte ).
#RES_TYPE=ubifs
#RES_MINSIZE=1048576		# (1024 MB)
#UBIFS_RESIMG=ubi_res.img

# UBIFS parameters
# This is 8GB MLC NAND FLASH, should be filled in by your NAND property.
NAND_PAGE_SIZE=8192 # unit is byte.
NAND_BLOCK_SIZE=2097152 # unit is byte.
#NAND_LEB_SIZE := $(shell expr $(NAND_BLOCK_SIZE) - $(NAND_PAGE_SIZE) \* 2 ) # unit is byte. LEB size = block size - (8192byte x 2)

#[zlib]
FW_KERNEL_COMPRESS_TYPE=

