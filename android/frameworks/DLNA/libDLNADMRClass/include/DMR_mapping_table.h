#ifndef __DMR_MAPPING_TABLE__
#define __DMR_MAPPING_TABLE__

#include <DLNA_DMR.h>

//TODO, remove these to "MimeTypes.h"
#define EXTENSION_AUDIO_OGG    ".ogg"
#define PROTOINFO_AUDIO_OGG    "http-get:*:audio/ogg:*"

#define EXTENSION_VIDEO_DAT    ".dat"
#define MIME_TYPE_VIDEO_DAT    "video/dat"
#define PROTINFO_VIDEO_DAT     "http-get:*:video/dat:*"

#define EXTENSION_VIDEO_VOB    ".vob"
#define MIME_TYPE_VIDEO_VOB    "video/vob"
#define PROTINFO_VIDEO_VOB     "http-get:*:video/vob:*"

#define EXTENSION_VIDEO_IFO	   ".ifo"
#define MIME_TYPE_VIDEO_IFO    "video/ifo"
#define PROTINFO_VIDEO_IFO     "http-get:*:video/ifo:*"

#define EXTENSION_VIDEO_TS     ".ts"
#define EXTENSION_VIDEO_TTS    ".tts"
#define MIME_TYPE_VIDEO_TS     "video/vnd.dlna.mpeg-tts"
#define PROTINFO_VIDEO_TS      "http-get:*:video/vnd.dlna.mpeg-tts:*"

#define EXTENSION_VIDEO_AVI    ".avi"
#define MIME_TYPE_VIDEO_AVI    "video/avi"
#define PROTINFO_VIDEO_AVI     "http-get:*:video/avi:*"


#define EXTENSION_AUDIO_ADTS2		".adts"
#define MIME_TYPE_AUDIO_ADTS2		"audio/vnd.dlna.adts"
#define PROTINFO_AUDIO_ADTS2		"http-get:*:audio/vnd.dlna.adts:DLNA.ORG_PN=AAC_ADTS_320"



#define EXTENSION_PLAYLIST_M3U ".m3u"
#define MIME_TYPE_PLAYLIST_M3U "audio/mpegurl"
#define PROTINFO_PLAYLIST_M3U  "http-get:*:audio/mpegurl:*"
//#define PROTINFO_PLAYLIST_M3U           "http-get:*:audio/m3u:*"

#define EXTENSION_VIDEO_RM			".rm"
#define MIME_TYPE_VIDEO_RM			"video/rm"
#define PROTINFO_VIDEO_RM			"http-get:*:video/rm:*"

#define EXTENSION_VIDEO_RMVB		".rmvb"
#define MIME_TYPE_VIDEO_RMVB		"video/rmvb"
#define PROTINFO_VIDEO_RMVB			"http-get:*:video/rmvb:*"

#define EXTENSION_VIDEO_FLV			".flv"
#define MIME_TYPE_VIDEO_FLV			"video/flv"
#define PROTINFO_VIDEO_FLV			"http-get:*:video/flv:*"

#define MIME_TYPE_VIDEO_ALL			"video/*"
#define MIME_TYPE_AUDIO_ALL			"audio/*"
#define MIME_TYPE_IMAGE_ALL			"image/*"
#define MIME_TYPE_NONE				""


typedef struct _tagEXTTORENDERERTYPE
{
	const char* mediaExtension;
    const char* mediaProtocolInfo;
	SUBRENDERER_TYPE subrendererType;
	const char *mimeTypeProtocolInfo;
	ENUM_MEDIA_TYPE mediaType;
} EXTTORENDERERTYPE;

const EXTTORENDERERTYPE extension_protocolInfo_mapping[] = {
	{EXTENSION_VIDEO_AAC,    PROTINFO_VIDEO_AAC,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_AAC,          MEDIATYPE_None},
	{EXTENSION_AUDIO_LPCM,   PROTINFO_AUDIO_LPCM,    DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_LPCM,         MEDIASUBTYPE_PCM},
	{EXTENSION_AUDIO_LPCM,   PROTINFO_AUDIO_LPCM,    DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_L16_SLPCM,    MEDIASUBTYPE_PCM},
	{EXTENSION_AUDIO_LPCM,   PROTINFO_AUDIO_LPCM,    DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_L16_48_SLPCM, MEDIASUBTYPE_PCM},
	{EXTENSION_AUDIO_LPCM,   PROTINFO_AUDIO_LPCM,    DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_L16_48_LPCM,  MEDIASUBTYPE_PCM},
	{EXTENSION_AUDIO_MPEG,   PROTINFO_AUDIO_MPEG,    DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_MPEG,         MEDIASUBTYPE_MP3},
	{EXTENSION_AUDIO_AAC,    PROTINFO_AUDIO_AAC,     DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_AAC,          MEDIASUBTYPE_MP4_VIDEO},
	{EXTENSION_AUDIO_ADTS,   PROTINFO_AUDIO_ADTS,    DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_ADTS,         MEDIASUBTYPE_AAC},
	{EXTENSION_AUDIO_ADTS2,  PROTINFO_AUDIO_ADTS2,   DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_ADTS2,        MEDIASUBTYPE_AAC},
	{EXTENSION_AUDIO_WMA,    PROTINFO_AUDIO_WMA,     DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_WMA,          MEDIATYPE_None},
	{EXTENSION_AUDIO_WAV,    PROTINFO_AUDIO_WAV,     DMR_SUBR_AUDIO, MIME_TYPE_AUDIO_WAV,          MEDIASUBTYPE_WAVE},
//	{EXTENSION_AUDIO_OGG,    PROTINFO_AUDIO_OGG,     DMR_SUBR_VIDEO, MEDIASUBTYPE_OGG},
//	{EXTENSION_VIDEO_MPEG2,  PROTINFO_VIDEO_MPEG2,   DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_MPEG2,        MEDIASUBTYPE_MPEG_PROGRAM},
	{EXTENSION_VIDEO_MPEG2,  PROTINFO_VIDEO_MPEG2,   DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_MPEG2,        MEDIATYPE_None},
	{EXTENSION_VIDEO_WMV,    PROTINFO_VIDEO_WMV,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_WMV,          MEDIATYPE_None},
	{EXTENSION_VIDEO_ASF,    PROTINFO_VIDEO_ASF,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_ASF,          MEDIATYPE_None},
	{EXTENSION_VIDEO_DAT,    PROTINFO_VIDEO_DAT,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_DAT,          MEDIASUBTYPE_MPEG_PROGRAM},
	{EXTENSION_VIDEO_VOB,    PROTINFO_VIDEO_VOB,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_VOB,          MEDIASUBTYPE_MPEG_PROGRAM},
	{EXTENSION_VIDEO_IFO,    PROTINFO_VIDEO_IFO,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_IFO,          MEDIASUBTYPE_DVD_VIDEO_ROM},
	{EXTENSION_VIDEO_TS,     PROTINFO_VIDEO_TS,      DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_TS,           MEDIASUBTYPE_MPEG2_TRANSPORT},
	{EXTENSION_VIDEO_TTS,    PROTINFO_VIDEO_TS,      DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_TS,           MEDIASUBTYPE_MPEG2_TRANSPORT},
	{EXTENSION_VIDEO_AVI,    PROTINFO_VIDEO_AVI,     DMR_SUBR_VIDEO, MIME_TYPE_VIDEO_AVI,          MEDIATYPE_Interleaved},
	{EXTENSION_IMAGE_JPG,    PROTINFO_IMAGE_JPEG,    DMR_SUBR_IMAGE, MIME_TYPE_IMAGE_JPEG,         MEDIASUBTYPE_IMAGE_JPEG},
	{EXTENSION_IMAGE_PNG,    PROTINFO_IMAGE_PNG,     DMR_SUBR_IMAGE, MIME_TYPE_IMAGE_PNG,          MEDIASUBTYPE_IMAGE_PNG},
//	{EXTENSION_IMAGE_TIF,    PROTINFO_IMAGE_TIF,     DMR_SUBR_IMAGE, MIME_TYPE_IMAGE_TIF,          MEDIASUBTYPE_IMAGE_TIFF},
	{EXTENSION_IMAGE_GIF,    PROTINFO_IMAGE_GIF,     DMR_SUBR_IMAGE, MIME_TYPE_IMAGE_GIF,          MEDIASUBTYPE_IMAGE_GIF},
	{EXTENSION_IMAGE_BMP,    PROTINFO_IMAGE_BMP,     DMR_SUBR_IMAGE, MIME_TYPE_IMAGE_BMP,          MEDIASUBTYPE_IMAGE_BITMAP},
//	{EXTENSION_PLAYLIST_ASX, PROTINFO_PLAYLIST_ASX, DMR_SUBR_PLAYLIST},
#ifdef DLNADMRCTT
	{EXTENSION_PLAYLIST_M3U, PROTINFO_PLAYLIST_M3U , DMR_SUBR_PLAYLIST,	MIME_TYPE_PLAYLIST_M3U,		MEDIATYPE_None},
#else
	{EXTENSION_PLAYLIST_M3U, PROTINFO_PLAYLIST_M3U , DMR_SUBR_VIDEO,	MIME_TYPE_VIDEO_ALL,		MEDIATYPE_None},
#endif
//	{EXTENSION_VIDEO_RM,	 PROTINFO_VIDEO_RM,	 	 DMR_SUBR_VIDEO, 	MIME_TYPE_VIDEO_RM,			MEDIASUBTYPE_RM},
//	{EXTENSION_VIDEO_RMVB,	 PROTINFO_VIDEO_RMVB,    DMR_SUBR_VIDEO, 	MIME_TYPE_VIDEO_RMVB,		MEDIASUBTYPE_RM},
	{EXTENSION_VIDEO_FLV,	 PROTINFO_VIDEO_FLV,	 DMR_SUBR_VIDEO, 	MIME_TYPE_VIDEO_FLV,		MEDIATYPE_None},
};

typedef struct _tagCDSTORENDERERTYPE
{
    unsigned int objectMajorType;
    SUBRENDERER_TYPE subrendererType;
	const char *mimeTypeProtocolInfo;
} CDSTORENDERERTYPE;

const CDSTORENDERERTYPE cds_renderertype_mapping[] = {
    {CDS_CLASS_MASK_MAJOR_AUDIOITEM, 	DMR_SUBR_AUDIO,		MIME_TYPE_AUDIO_ALL},
    {CDS_CLASS_MASK_MAJOR_VIDEOITEM, 	DMR_SUBR_VIDEO,		MIME_TYPE_VIDEO_ALL},
    {CDS_CLASS_MASK_MAJOR_IMAGEITEM, 	DMR_SUBR_IMAGE,		MIME_TYPE_IMAGE_ALL},
    {CDS_CLASS_MASK_MAJOR_PLAYLISTITEM, DMR_SUBR_PLAYLIST,	MIME_TYPE_NONE},
    {CDS_CLASS_MASK_MAJOR_TEXTITEM, 	DMR_SUBR_TEXT,		MIME_TYPE_NONE},
};

#endif /* __DMR_MAPPING_TABLE__ */
