#include "Drm.h"
#include "Crypto.h"
#include <utils/Log.h>
#include <utils/Vector.h>

uint8_t rtk_uuid[16] = {0x69, 0x3e, 0x18, 0xba, 0xba, 0xb0, 0x11, 0xe6,
                               0xa4, 0xa6, 0xce, 0xc0, 0xc9, 0x32, 0xce, 0x01};


int main(void)
{


#if 0
	android::Vector<uint8_t> sessionId;
	android::Vector<uint8_t> keyId;
	android::Vector<uint8_t> input;
	android::Vector<uint8_t> iv;
	android::Vector<uint8_t> output;
	android::Vector<uint8_t> dec_output;

	android::Drm *RtkDrm;

	RtkDrm = new android::Drm;



	for (int i=0 ; i < 5 ; i++)
   			keyId.push_back(i);

   	for(int i=0 ; i < 35 ; i++)
   			input.push_back(i);

   	for(int i=0 ; i < 35 ; i++)
   			output.push_back(0);

   	for(int i=0 ; i < 35 ; i++)
   			dec_output.push_back(0);

   	iv.push_back(0);

	ALOGE("[test_rtkplugin] createPlugin \n");
	RtkDrm->createPlugin(rtk_uuid);

	ALOGE("[test_rtkplugin] openSession \n");
	RtkDrm->openSession(sessionId);

	ALOGE("[test_rtkplugin] encrypt \n");
	RtkDrm->encrypt(sessionId, keyId, input, iv, output);


	ALOGE("[test_rtkplugin] decrypt \n");
	RtkDrm->decrypt(sessionId, keyId, output, iv, dec_output);

	ALOGE("[test_rtkplugin] closeSession \n");
	RtkDrm->closeSession(sessionId);

	//RtkDrm->destroyPlugin();

#else
	android::Crypto *RtkCrypto;
	RtkCrypto = new android::Crypto;

	bool secure = false;
	size_t size = 50;

	uint8_t src[50] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
						0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 
						0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 
						0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
						0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31};

	uint8_t dst[50] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	uint8_t dst2[50] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


	RtkCrypto->createPlugin(rtk_uuid, NULL, 0);

	RtkCrypto->encrypt( secure,
				        (void *)src,
				        (void *)dst,
				        size);
	
	RtkCrypto->decrypt( secure,
				        (void *)dst,
				        (void *)dst2,
				        size);
	

#endif
	return 0;

}