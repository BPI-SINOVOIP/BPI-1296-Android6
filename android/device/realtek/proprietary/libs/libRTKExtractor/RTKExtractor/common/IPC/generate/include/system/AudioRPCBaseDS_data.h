/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AUDIORPCBASEDS_DATA_H_RPCGEN
#define _AUDIORPCBASEDS_DATA_H_RPCGEN

#include <rpc_common.h>

enum AUDIO_DEC_TYPE {
	AUDIO_UNKNOWN_TYPE = 0,
	AUDIO_MPEG_DECODER_TYPE = 1,
	AUDIO_AC3_DECODER_TYPE = 2,
	AUDIO_LPCM_DECODER_TYPE = 3,
	AUDIO_DTS_DECODER_TYPE = 4,
	AUDIO_WMA_DECODER_TYPE = 5,
	AUDIO_AAC_DECODER_TYPE = 6,
	AUDIO_VORBIS_DECODER_TYPE = 7,
	AUDIO_DV_DECODER_TYPE = 8,
	AUDIO_MLP_DECODER_TYPE = 9,
	AUDIO_DDP_DECODER_TYPE = 10,
	AUDIO_DTS_HD_DECODER_TYPE = 11,
	AUDIO_WMA_PRO_DECODER_TYPE = 12,
	AUDIO_MP4AAC_DECODER_TYPE = 13,
	AUDIO_MP3_PRO_DECODER_TYPE = 14,
	AUDIO_MP4HEAAC_DECODER_TYPE = 15,
	AUDIO_RAW_AAC_DECODER_TYPE = 16,
	AUDIO_RA1_DECODER_TYPE = 17,
	AUDIO_RA2_DECODER_TYPE = 18,
	AUDIO_ATRAC3_DECODER_TYPE = 19,
	AUDIO_COOK_DECODER_TYPE = 20,
	AUDIO_LSD_DECODER_TYPE = 21,
	AUDIO_ADPCM_DECODER_TYPE = 22,
	AUDIO_FLAC_DECODER_TYPE = 23,
	AUDIO_ULAW_DECODER_TYPE = 24,
	AUDIO_ALAW_DECODER_TYPE = 25,
	AUDIO_ALAC_DECODER_TYPE = 26,
	AUDIO_DTS_HIGH_RESOLUTION_DECODER_TYPE = 27,
	AUDIO_DTS_LBR_DECODER_TYPE = 28,
	AUDIO_DTS_MASTER_AUDIO_DECODER_TYPE = 29,
	AUDIO_AMRNB_DECODER_TYPE = 30,
	AUDIO_MIDI_DECODER_TYPE = 31,
	AUDIO_APE_DECODER_TYPE = 32,
	AUDIO_AVS_DECODER_TYPE = 33,
	AUDIO_NELLYMOSER_DECODER_TYPE = 34,
	AUDIO_WMA_LOSSLESS_DECODER_TYPE = 35,
	AUDIO_UNCERTAIN_DECODER_TYPE = 36,
	AUDIO_UNCERTAIN_HDMV_DECODER_TYPE = 37,
	AUDIO_ILBC_DECODER_TYPE = 38,
	AUDIO_SILK_DECODER_TYPE = 39,
	AUDIO_AMRWB_DECODER_TYPE = 40,
	AUDIO_G729_DECODER_TYPE = 41,
	AUDIO_DRA_DECODER_TYPE = 42,
};
typedef enum AUDIO_DEC_TYPE AUDIO_DEC_TYPE;

enum AUDIO_CHANNEL_OUT_INDEX {
	AUDIO_NULL_CHANNEL_INDEX = 0,
	AUDIO_LEFT_FRONT_INDEX = 1,
	AUDIO_RIGHT_FRONT_INDEX = 2,
	AUDIO_CENTER_FRONT_INDEX = 5,
	AUDIO_LFE_INDEX = 6,
	AUDIO_LEFT_SURROUND_REAR_INDEX = 3,
	AUDIO_RIGHT_SURROUND_REAR_INDEX = 4,
	AUDIO_LEFT_OUTSIDE_FRONT_INDEX = 7,
	AUDIO_RIGHT_OUTSIDE_FRONT_INDEX = 8,
	AUDIO_SPDIF_LEFT_CHANNEL_INDEX = 9,
	AUDIO_SPDIF_RIGHT_CHANNEL_INDEX = 10,
	AUDIO_SURROUND_INDEX = 11,
	AUDIO_CENTER_SURROUND_REAR_INDEX = 12,
	AUDIO_OverHead_INDEX = 13,
	AUDIO_LEFT_SURROUND_INDEX = 14,
	AUDIO_RIGHT_SURROUND_INDEX = 15,
	AUDIO_LEFT_FRONT_HIGH_INDEX = 16,
	AUDIO_RIGHT_FRONT_HIGH_INDEX = 17,
	AUDIO_LEFT_INNER_FRONT_INDEX = 18,
	AUDIO_RIGHT_INNER_FRONT_INDEX = 19,
	AUDIO_LEFT_REAR_INDEX = 20,
	AUDIO_RIGHT_REAR_INDEX = 21,
	AUDIO_LEFT_SURROUND_DIRECT_INDEX = 22,
	AUDIO_RIGHT_SURROUND_DIRECT_INDEX = 23,
	AUDIO_CENTER_FRONT_HIGH_INDEX = 24,
	AUDIO_LFE2_INDEX = 25,
	AUDIO_SPDIF_NON_PCM_TYPE = 256,
	AUDIO_ENABLE_DOWNMIX = 257,
};
typedef enum AUDIO_CHANNEL_OUT_INDEX AUDIO_CHANNEL_OUT_INDEX;

enum AUDIO_MODULE_TYPE {
	AUDIO_OUT = 7,
	AUDIO_IN = 8,
	AUDIO_ENCODER = 9,
	AUDIO_MPEG_ENCODER = 10,
	AUDIO_PSEUDO_OUT = 14,
	AUDIO_PP_OUT = 15,
	AUDIO_DECODER = 16,
	AUDIO_UNKNOWN = 17,
	AUDIO_LPCM_ENCODER = 19,
	AUDIO_AAC_ENCODER = 21,
	AUDIO_MP3_ENCODER = 22,
	AUDIO_RV_PARSER = 23,
	AUDIO_AC3_ENCODER = 24,
	AUDIO_VIENNA_OUT = 25,
	AUDIO_DTS_ENCODER = 26,
	AUDIO_VP6_PARSER = 27,
	AUDIO_IN_DEVICE = 28,
	AUDIO_ILBC_ENCODER = 29,
	AUDIO_KARAOKE_MIXER = 30,
	AUDIO_VP8_PARSER = 31,
	AUDIO_SILK_ENCODER = 32,
	AUDIO_G729_ENCODER = 33,
	AUDIO_PCMU_ENCODER = 34,
	AUDIO_PCMA_ENCODER = 35,
};
typedef enum AUDIO_MODULE_TYPE AUDIO_MODULE_TYPE;

enum AUDIO_IO_PIN {
	BASE_BS_IN = 0,
	EXT_BS_IN = 1,
	PCM_IN = 2,
	BASE_BS_OUT = 3,
	EXT_BS_OUT = 4,
	PCM_OUT = 5,
	SPDIF_IN = 6,
	SPDIF_OUT = 7,
	NON_PCM_OUT = 8,
	INBAND_QUEUE = 9,
	MESSAGE_QUEUE = 10,
	MIC_IN = 11,
	SOUND_EVENT_IN = 12,
	PCM_OUT1 = 13,
	PCM_OUT2 = 14,
	FLASH_AUDIO_PIN_1 = 15,
	FLASH_AUDIO_PIN_2 = 16,
	FLASH_AUDIO_PIN_3 = 17,
	FLASH_AUDIO_PIN_4 = 18,
	FLASH_AUDIO_PIN_5 = 19,
	FLASH_AUDIO_PIN_6 = 20,
	FLASH_AUDIO_PIN_7 = 21,
	FLASH_AUDIO_PIN_8 = 22,
	FLASH_AUDIO_PIN_9 = 23,
	FLASH_AUDIO_PIN_10 = 24,
	FLASH_AUDIO_PIN_11 = 25,
	FLASH_AUDIO_PIN_12 = 26,
	FLASH_AUDIO_PIN_13 = 27,
	FLASH_AUDIO_PIN_14 = 28,
	FLASH_AUDIO_PIN_15 = 29,
	FLASH_AUDIO_PIN_16 = 30,
	DWNSTRM_INBAND_QUEUE = 200,
};
typedef enum AUDIO_IO_PIN AUDIO_IO_PIN;

enum ENUM_AUDIO_BILINGUAL_TYPE {
	ENUM_AUDIO_STEREO = 0,
	ENUM_AUDIO_MAIN_BILINGUAL = 1,
	ENUM_AUDIO_SUB_BILINGUAL = 2,
};
typedef enum ENUM_AUDIO_BILINGUAL_TYPE ENUM_AUDIO_BILINGUAL_TYPE;

enum ENUM_AUDIO_NIGHTMODE_CFG {
	ENUM_AUDIO_NIGHTMODE_OFF = 0,
	ENUM_AUDIO_NIGHTMODE_ON = 1,
};
typedef enum ENUM_AUDIO_NIGHTMODE_CFG ENUM_AUDIO_NIGHTMODE_CFG;

struct AUDIO_RPC_NIGHTMODE {
	long instanceID;
	long cfg;
};
typedef struct AUDIO_RPC_NIGHTMODE AUDIO_RPC_NIGHTMODE;

enum ENUM_AUDIO_DAC_SWITCH_CFG {
	ENUM_AUDIO_DAC_SWITCH_OFF = 0,
	ENUM_AUDIO_DAC_SWITCH_ON = 1,
};
typedef enum ENUM_AUDIO_DAC_SWITCH_CFG ENUM_AUDIO_DAC_SWITCH_CFG;

enum ENUM_AUDIO_TRUEHD_LOSSLESSMODE_CFG {
	ENUM_AUDIO_TRUEHD_LOSSLESSMODE_OFF = 0,
	ENUM_AUDIO_TRUEHD_LOSSLESSMODE_ON = 1,
};
typedef enum ENUM_AUDIO_TRUEHD_LOSSLESSMODE_CFG ENUM_AUDIO_TRUEHD_LOSSLESSMODE_CFG;

struct AUDIO_RPC_TRUEHD_LOSSLESSMODE {
	long cfg;
};
typedef struct AUDIO_RPC_TRUEHD_LOSSLESSMODE AUDIO_RPC_TRUEHD_LOSSLESSMODE;

enum ENUM_AUDIO_DELAY_DAC_SWITCH_CFG {
	ENUM_AUDIO_DELAY_DAC_SWITCH_OFF = 0,
	ENUM_AUDIO_DELAY_DAC_SWITCH_ON = 1,
};
typedef enum ENUM_AUDIO_DELAY_DAC_SWITCH_CFG ENUM_AUDIO_DELAY_DAC_SWITCH_CFG;

struct AUDIO_RPC_DEC_BITSTREAM_BUFFER {
	long bsBase;
	long bsSize;
};
typedef struct AUDIO_RPC_DEC_BITSTREAM_BUFFER AUDIO_RPC_DEC_BITSTREAM_BUFFER;

struct AUDIO_RPC_FORMAT_INFO {
	u_char result;
	enum AUDIO_DEC_TYPE Type;
	long VariableBitRateFlag;
	long BitRate;
	u_char copyright;
	long rsv_data[4];
};
typedef struct AUDIO_RPC_FORMAT_INFO AUDIO_RPC_FORMAT_INFO;

struct AUDIO_PCM_FORMAT {
	int chnum;
	int samplebit;
	int samplerate;
	u_int dynamicRange;
	u_char emphasis;
	u_char mute;
};
typedef struct AUDIO_PCM_FORMAT AUDIO_PCM_FORMAT;

struct AUDIO_EXT_BS {
	int exist;
};
typedef struct AUDIO_EXT_BS AUDIO_EXT_BS;

struct AUDIO_DEC_CFG {
	long scalehi;
	long scalelo;
	u_short mode;
	u_short LFEMode;
	u_short dualmono;
	u_short comprMode;
	u_short stereoMode;
};
typedef struct AUDIO_DEC_CFG AUDIO_DEC_CFG;

enum ENCODE_MODE {
	DUALCHANNEL_1_AND_1 = 0,
	MONO = 1,
	STEREO = 2,
	JOINT_STERO = 3,
};
typedef enum ENCODE_MODE ENCODE_MODE;

struct AUDIO_ENC_CFG {
	int inputmode;
	int outputmode;
	int DRC1;
	int DRC2;
	int datarate;
	int samprate;
	int LorR;
};
typedef struct AUDIO_ENC_CFG AUDIO_ENC_CFG;

struct AUDIO_RPC_INSTANCE {
	long instanceID;
	long type;
};
typedef struct AUDIO_RPC_INSTANCE AUDIO_RPC_INSTANCE;

struct AUDIO_RPC_HASH {
	long rand_value;
};
typedef struct AUDIO_RPC_HASH AUDIO_RPC_HASH;

struct AUDIO_FRAME_BOUNDARY {
	long frameBeginPtr;
	long writeBeginPtr;
	u_long writeSize;
};
typedef struct AUDIO_FRAME_BOUNDARY AUDIO_FRAME_BOUNDARY;

struct AUDIO_RPC_SEND_LONG {
	long instanceID;
	long data;
};
typedef struct AUDIO_RPC_SEND_LONG AUDIO_RPC_SEND_LONG;

struct AUDIO_RPC_SENDPIN_LONG {
	long instanceID;
	long pinID;
	long data;
};
typedef struct AUDIO_RPC_SENDPIN_LONG AUDIO_RPC_SENDPIN_LONG;

struct AUDIO_RPC_SEEK {
	long instanceID;
	long speed;
	long skip;
};
typedef struct AUDIO_RPC_SEEK AUDIO_RPC_SEEK;

struct AUDIO_RPC_PRIVATEINFO {
	long instanceID;
	long pData;
	long length;
};
typedef struct AUDIO_RPC_PRIVATEINFO AUDIO_RPC_PRIVATEINFO;

struct AUDIO_RPC_RINGBUFFER {
	long instanceID;
	long in_beginPAddrList[8];
	long in_listSize;
	long in_bufSize;
	long in_pinID;
	long extin_beginPAddrList[8];
	long extin_listSize;
	long extin_bufSize;
	long extin_pinID;
	long out_beginPAddrList[8];
	long out_listSize;
	long out_bufSize;
	long out_pinID;
};
typedef struct AUDIO_RPC_RINGBUFFER AUDIO_RPC_RINGBUFFER;

struct AUDIO_RPC_WRITEPACK {
	long instanceID;
	long pinID;
	long writePtr[8];
	int listSize;
	int writeSize;
};
typedef struct AUDIO_RPC_WRITEPACK AUDIO_RPC_WRITEPACK;

struct AUDIO_RPC_READPACK {
	long instanceID;
	long pinID;
	long readPtr[8];
	int listSize;
	int readSize;
};
typedef struct AUDIO_RPC_READPACK AUDIO_RPC_READPACK;

struct AUDIO_RPC_SENDIO {
	long instanceID;
	int pinID;
};
typedef struct AUDIO_RPC_SENDIO AUDIO_RPC_SENDIO;

struct AUDIO_RPC_SWITCHAGENT {
	long instanceID1;
	long instanceID2;
	AUDIO_PCM_FORMAT pcmFormat;
};
typedef struct AUDIO_RPC_SWITCHAGENT AUDIO_RPC_SWITCHAGENT;

struct AUDIO_RPC_PCMFORMAT {
	long instanceID;
	long pinID;
	AUDIO_PCM_FORMAT pcmFormat;
};
typedef struct AUDIO_RPC_PCMFORMAT AUDIO_RPC_PCMFORMAT;

struct AUDIO_RPC_FRAME_BOUNDARY {
	long instanceID;
	AUDIO_FRAME_BOUNDARY frameBoundary;
};
typedef struct AUDIO_RPC_FRAME_BOUNDARY AUDIO_RPC_FRAME_BOUNDARY;

struct AUDIO_RPC_DECCFG {
	long instanceID;
	AUDIO_DEC_CFG cfg;
};
typedef struct AUDIO_RPC_DECCFG AUDIO_RPC_DECCFG;

struct AUDIO_RPC_EXTBS_EXIST {
	long instanceID;
	int extbsExist;
};
typedef struct AUDIO_RPC_EXTBS_EXIST AUDIO_RPC_EXTBS_EXIST;

struct AUDIO_RPC_CONNECTION {
	long srcInstanceID;
	long srcPinID;
	long desInstanceID;
	long desPinID;
	long mediaType;
};
typedef struct AUDIO_RPC_CONNECTION AUDIO_RPC_CONNECTION;

struct AUDIO_RPC_REFCLOCK {
	long instanceID;
	long pRefClockID;
	long pRefClock;
};
typedef struct AUDIO_RPC_REFCLOCK AUDIO_RPC_REFCLOCK;

struct AUDIO_RPC_PTS_INFO {
	long instanceID;
	long pinID;
	int64_t pts;
	long pWritePointer;
	long length;
};
typedef struct AUDIO_RPC_PTS_INFO AUDIO_RPC_PTS_INFO;

struct AUDIO_RPC_RINGBUFFER_HEADER {
	long instanceID;
	long pinID;
	long pRingBufferHeaderList[8];
	long readIdx;
	long listSize;
};
typedef struct AUDIO_RPC_RINGBUFFER_HEADER AUDIO_RPC_RINGBUFFER_HEADER;

struct AUDIO_RPC_FOCUS {
	long instanceID;
	long focusID;
};
typedef struct AUDIO_RPC_FOCUS AUDIO_RPC_FOCUS;

struct AUDIO_RPC_AO_FOCUS {
	long instanceID;
	long focusID;
	long PTS_length;
};
typedef struct AUDIO_RPC_AO_FOCUS AUDIO_RPC_AO_FOCUS;

enum ENUM_AUDIO_CHANNEL_IN {
	IN_NULL_CHANNEL = 0,
	ADC0_LEFT_CHANNEL_EN = 1,
	ADC0_RIGHT_CHANNEL_EN = 2,
	ADC1_LEFT_CHANNEL_EN = 4,
	ADC1_Right_CHANNEL_EN = 8,
	SPDIF_LEFT_CHANNEL_EN = 16,
	SPDIF_RIGHT_CHANNEL_EN = 32,
	ADC2_LEFT_CHANNEL_EN = 64,
	ADC2_RIGHT_CHANNEL_EN = 128,
};
typedef enum ENUM_AUDIO_CHANNEL_IN ENUM_AUDIO_CHANNEL_IN;

enum ENUM_AUDIO_CHANNEL_OUT {
	OUT_NULL_CHANNEL = 0,
	LEFT_CENTER_FRONT_CHANNEL_EN = 1,
	RIGHT_CENTER_FRONT_CHANNEL_EN = 2,
	CENTER_FRONT_CHANNEL_EN = 4,
	LFE_CHANNEL_EN = 8,
	LEFT_SURROUND_CHANNEL_EN = 16,
	RIGHT_SURROUND_CHANNEL_EN = 32,
	LEFT_OUTSIDE_FRONT_CHANNEL_EN = 64,
	RIGHT_OUTSIDE_FRONT_CHANNEL_EN = 128,
	NON_PCM_OUT_EN = 256,
	ENABLE_DOWNMIX = 257,
};
typedef enum ENUM_AUDIO_CHANNEL_OUT ENUM_AUDIO_CHANNEL_OUT;

struct AUDIO_GENERAL_CONFIG {
	char interface_en;
	char channel_in;
	char count_down_rec_en;
	int count_down_rec_cyc;
};
typedef struct AUDIO_GENERAL_CONFIG AUDIO_GENERAL_CONFIG;

struct AUDIO_SAMPLE_INFO {
	int sampling_rate;
	int PCM_bitnum;
};
typedef struct AUDIO_SAMPLE_INFO AUDIO_SAMPLE_INFO;

struct AUDIO_SPDIF_ERROR {
	u_char err_threshold;
	long errorReportEnable;
};
typedef struct AUDIO_SPDIF_ERROR AUDIO_SPDIF_ERROR;

struct AUDIO_ADC_CONFIG {
	AUDIO_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SAMPLE_INFO sampleInfo;
};
typedef struct AUDIO_ADC_CONFIG AUDIO_ADC_CONFIG;

struct AUDIO_SPDIF_CONFIG {
	AUDIO_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SPDIF_ERROR audioSPDIFError;
};
typedef struct AUDIO_SPDIF_CONFIG AUDIO_SPDIF_CONFIG;

struct AUDIO_IN_SOURCE {
	long instanceID;
	char focus_in;
};
typedef struct AUDIO_IN_SOURCE AUDIO_IN_SOURCE;

struct AUDIO_IN_DATA_MEASURE {
	long instanceID;
};
typedef struct AUDIO_IN_DATA_MEASURE AUDIO_IN_DATA_MEASURE;

struct AUDIO_IN_MUTE_INFO {
	long instanceID;
	char mute_en;
};
typedef struct AUDIO_IN_MUTE_INFO AUDIO_IN_MUTE_INFO;

struct AUDIO_OUT_COPY_SOURCE {
	long instanceID;
	int src_channel;
};
typedef struct AUDIO_OUT_COPY_SOURCE AUDIO_OUT_COPY_SOURCE;

struct AUDIO_OUT_SPDIF_SOURCE {
	long instanceID;
	int l_channel;
	int r_channel;
};
typedef struct AUDIO_OUT_SPDIF_SOURCE AUDIO_OUT_SPDIF_SOURCE;

struct AUDIO_KARAOKE_CONTROL_INFO {
	long instanceID;
	char speaker_mode;
	char vocal_mode;
};
typedef struct AUDIO_KARAOKE_CONTROL_INFO AUDIO_KARAOKE_CONTROL_INFO;

struct LINK_BUFFER {
	u_long magicNumber;
	u_long Reserved;
	u_long Next;
	u_long Size;
	u_char Data[1];
};
typedef struct LINK_BUFFER LINK_BUFFER;

struct AUDIO_SOUND_EVENT {
	long instanceID;
	AUDIO_PCM_FORMAT pcmFormat;
	long endianType;
	long pBitstreamRB;
	long iteration;
};
typedef struct AUDIO_SOUND_EVENT AUDIO_SOUND_EVENT;

struct AUDIO_HDMI_SET {
	u_int HDMI_Frequency;
};
typedef struct AUDIO_HDMI_SET AUDIO_HDMI_SET;

struct AUDIO_HDMI_MUTE_INFO {
	long instanceID;
	char hdmi_mute;
};
typedef struct AUDIO_HDMI_MUTE_INFO AUDIO_HDMI_MUTE_INFO;

struct AUDIO_OUT_MUTE_INFO {
	long instanceID;
	char mute_flag;
};
typedef struct AUDIO_OUT_MUTE_INFO AUDIO_OUT_MUTE_INFO;

struct AUDIO_CONFIG_ADC {
	long instanceID;
	AUDIO_ADC_CONFIG adcConfig;
};
typedef struct AUDIO_CONFIG_ADC AUDIO_CONFIG_ADC;

struct AUDIO_CONFIG_AFC {
	char afc_flag;
};
typedef struct AUDIO_CONFIG_AFC AUDIO_CONFIG_AFC;

struct AUDIO_DROP_SAMPLE {
	long instanceID;
	long drop_pts;
};
typedef struct AUDIO_DROP_SAMPLE AUDIO_DROP_SAMPLE;

struct AUDIO_P_W_NOISE_CFG {
	long instanceID;
	char pink_white_noise_en;
	char pink_white_noise_out_channel[6];
};
typedef struct AUDIO_P_W_NOISE_CFG AUDIO_P_W_NOISE_CFG;

enum ENUM_AUDIO_SPECTRUM_BANDNUM {
	ENUM_AUDIO_SPECTRUM_16BAND = 0,
	ENUM_AUDIO_SPECTRUM_32BAND = 1,
	ENUM_AUDIO_SPECTRUM_64BAND = 2,
	ENUM_AUDIO_SPECTRUM_ALLBAND = 3,
};
typedef enum ENUM_AUDIO_SPECTRUM_BANDNUM ENUM_AUDIO_SPECTRUM_BANDNUM;

struct AUDIO_SPECTRUM_CFG {
	long enable;
	long bandnum;
	long data_addr;
	long upper_bandlimit_addr;
};
typedef struct AUDIO_SPECTRUM_CFG AUDIO_SPECTRUM_CFG;

struct AUDIO_VOLUME_CONTROL {
	long instanceID;
	char level;
};
typedef struct AUDIO_VOLUME_CONTROL AUDIO_VOLUME_CONTROL;

struct AUDIO_CONFIG_SPDIF {
	long instanceID;
	AUDIO_SPDIF_CONFIG spdifConfig;
};
typedef struct AUDIO_CONFIG_SPDIF AUDIO_CONFIG_SPDIF;

struct AUDIO_CONFIG_SPDIF_ERR {
	long instanceID;
	AUDIO_SPDIF_ERROR audioSPDIFError;
};
typedef struct AUDIO_CONFIG_SPDIF_ERR AUDIO_CONFIG_SPDIF_ERR;

struct AUDIO_BACKDOOR_AI_INIT {
	long instanceID;
	long PTSStamp1;
	long PTSStamp2;
};
typedef struct AUDIO_BACKDOOR_AI_INIT AUDIO_BACKDOOR_AI_INIT;

struct AUDIO_OUT_GENERAL_CONFIG {
	char interface_en;
	char channel_out;
	char count_down_play_en;
	int count_down_play_cyc;
};
typedef struct AUDIO_OUT_GENERAL_CONFIG AUDIO_OUT_GENERAL_CONFIG;

struct AUDIO_OUT_CS_INFO {
	char non_pcm_valid;
	char non_pcm_format;
	int audio_format;
	char spdif_consumer_use;
	char copy_right;
	char pre_emphasis;
	char stereo_channel;
};
typedef struct AUDIO_OUT_CS_INFO AUDIO_OUT_CS_INFO;

struct AUDIO_DAC_CONFIG {
	AUDIO_OUT_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SAMPLE_INFO sampleInfo;
};
typedef struct AUDIO_DAC_CONFIG AUDIO_DAC_CONFIG;

struct AUDIO_OUT_SPDIF_CONFIG {
	AUDIO_OUT_GENERAL_CONFIG audioGeneralConfig;
	AUDIO_SAMPLE_INFO sampleInfo;
	AUDIO_OUT_CS_INFO out_cs_info;
};
typedef struct AUDIO_OUT_SPDIF_CONFIG AUDIO_OUT_SPDIF_CONFIG;

struct AUDIO_CONFIG_DAC_I2S {
	long instanceID;
	AUDIO_DAC_CONFIG dacConfig;
};
typedef struct AUDIO_CONFIG_DAC_I2S AUDIO_CONFIG_DAC_I2S;

struct AUDIO_KARAOKE_SCORING_CONFIG {
	u_char ena;
	long scoring_mode;
};
typedef struct AUDIO_KARAOKE_SCORING_CONFIG AUDIO_KARAOKE_SCORING_CONFIG;

enum ENUM_KARAOKE_SCORING_ENA {
	KARAOKE_SCORING_ENA_OFF = 0,
	KARAOKE_SCORING_ENA_ON = 1,
};
typedef enum ENUM_KARAOKE_SCORING_ENA ENUM_KARAOKE_SCORING_ENA;

enum ENUM_KARAOKE_SCORING_MODE {
	KARAOKE_SCORING_MODE_HAPPY = 0,
	KARAOKE_SCORING_MODE_FUNDAMENTAL = 1,
	KARAOKE_SCORING_MODE_ADVANCED = 2,
};
typedef enum ENUM_KARAOKE_SCORING_MODE ENUM_KARAOKE_SCORING_MODE;

struct AUDIO_CONFIG_DAC_SPDIF {
	long instanceID;
	AUDIO_OUT_SPDIF_CONFIG spdifConfig;
};
typedef struct AUDIO_CONFIG_DAC_SPDIF AUDIO_CONFIG_DAC_SPDIF;

struct AUDIO_RPC_SPDIF_CHANNEL_STATUS {
	long instanceID;
	long ChannelStatus[6];
};
typedef struct AUDIO_RPC_SPDIF_CHANNEL_STATUS AUDIO_RPC_SPDIF_CHANNEL_STATUS;

enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE {
	AUDIOENCODER_AudioGEN = 0,
	AUDIOENCODER_AudioFrameInfo = 1,
	AUDIOENCODER_TotalInfo = 2,
	AUDIOENCODER_AudioEOSInfo = 3,
	AUDIOENCODER_InputEOSInfo = 4,
};
typedef enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE;

struct AUDIO_RPC_ENC_ELEM_GENERAL_INFO {
	enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE infoType;
	enum AUDIO_MODULE_TYPE audioEncoderType;
	long bitRate;
	long samplingRate;
	enum ENCODE_MODE mode;
};
typedef struct AUDIO_RPC_ENC_ELEM_GENERAL_INFO AUDIO_RPC_ENC_ELEM_GENERAL_INFO;

struct AUDIO_RPC_ENC_ELEM_FRAME_INFO {
	enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE infoType;
	u_int frameNumber;
	u_long PTSH;
	u_long PTSL;
	long frameSize;
	long NumberOfFrame;
};
typedef struct AUDIO_RPC_ENC_ELEM_FRAME_INFO AUDIO_RPC_ENC_ELEM_FRAME_INFO;

struct AUDIO_RPC_DEC_GENERAL_INFO {
	long instanceID;
	long samplingRate;
	long bitRate;
	long bitWidth;
};
typedef struct AUDIO_RPC_DEC_GENERAL_INFO AUDIO_RPC_DEC_GENERAL_INFO;

struct AUDIO_RPC_DEC_FRAME_INFO {
	long instanceID;
	long frameSize;
	long NumberOfFrame;
	char EOS;
};
typedef struct AUDIO_RPC_DEC_FRAME_INFO AUDIO_RPC_DEC_FRAME_INFO;

struct AUDIO_RPC_ERROR {
	long instanceID;
	long audioError;
};
typedef struct AUDIO_RPC_ERROR AUDIO_RPC_ERROR;

struct AUDIO_RPC_MASTERSHIP {
	long instanceID;
	char MasterShip;
};
typedef struct AUDIO_RPC_MASTERSHIP AUDIO_RPC_MASTERSHIP;

struct AUDIO_RPC_ENC_SOURCEFILE {
	long instanceID;
	char fileName[20];
	long length;
};
typedef struct AUDIO_RPC_ENC_SOURCEFILE AUDIO_RPC_ENC_SOURCEFILE;

enum AUDIO_PP_FUNCTION {
	ENUM_AUDIO_PP_MASTER = 0,
	ENUM_AUDIO_DEEMPHASIZE = 1,
	ENUM_AUDIO_PINKNOISE = 2,
	ENUM_AUDIO_DD_VIRTUAL_SURROUND = 3,
	ENUM_AUDIO_DD_VIRTUAL_SPEAKER = 4,
	ENUM_AUDIO_DD_EX = 5,
	ENUM_AUDIO_REVERB = 6,
	ENUM_AUDIO_EQUALIZER = 7,
	ENUM_AUDIO_PROLOGIC2 = 8,
	ENUM_AUDIO_SRS = 9,
	ENUM_AUDIO_BASS_MANAGER = 10,
	ENUM_AUDIO_DTS_NEO = 11,
	ENUM_AUDIO_DOWN_MIX = 12,
	ENUM_AUDIO_MIXER = 13,
	ENUM_AUDIO_SRC = 14,
	ENUM_AUDIO_KEY_SHIFT = 15,
	ENUM_AUDIO_VOCAL_REMOVER = 16,
};
typedef enum AUDIO_PP_FUNCTION AUDIO_PP_FUNCTION;

struct AUDIO_PP_FUNCTION_MODE {
	char AUDIO_PP_FUNCTION_ENA;
	char AUDIO_DEEMPHASIZE_ENA;
	char AUDIO_PINKNOISE_ENA;
	char AUDIO_DD_VIRTUAL_SURROUND_ENA;
	char AUDIO_DD_VIRTUAL_SPEAKER_ENA;
	char AUDIO_DD_EX_ENA;
	char AUDIO_EQUALIZER_ENA;
	char AUDIO_PROLOGIC2_ENA;
	char AUDIO_SRS_ENA;
	char AUDIO_BASS_MANAGER_ENA;
	char AUDIO_DTS_NEO_ENA;
	char AUDIO_DOWN_MIX_ENA;
	char AUDIO_SRC_ENA;
	char AUDIO_VOCAL_REMOVER_ENA[4];
	char AUDIO_REVERB_ENA[4];
	char AUDIO_KEY_SHIFT_ENA[4];
};
typedef struct AUDIO_PP_FUNCTION_MODE AUDIO_PP_FUNCTION_MODE;

struct AUDIO_PP_CONFIG {
	long instanceID;
	AUDIO_PP_FUNCTION_MODE app_config;
};
typedef struct AUDIO_PP_CONFIG AUDIO_PP_CONFIG;

struct AUDIO_PROLOGIC2_MODE {
	char abaldisable_config_flag;
	char chanconfig_config_flag;
	char dimset_config_flag;
	char surfiltenable_config_flag;
	char modeselect_config_flag;
	char panoramaenable_config_flag;
	char fix_pcmscalefac_config_flag;
	char rsinvenable_config_flag;
	char samprateid_config_flag;
	char cwidthset_config_flag;
	long abaldisable;
	long chanconfig;
	long dimset;
	long surfiltenable;
	long modeselect;
	long panoramaenable;
	long fix_pcmscalefac;
	long rsinvenable;
	long samprateid;
	long cwidthset;
};
typedef struct AUDIO_PROLOGIC2_MODE AUDIO_PROLOGIC2_MODE;

enum ENUM_PROLOGIC2_ENA {
	ENUM_PROLOGIC2_OFF = 0,
	ENUM_PROLOGIC2_ON = 1,
};
typedef enum ENUM_PROLOGIC2_ENA ENUM_PROLOGIC2_ENA;

struct AUDIO_PROLOGIC2_CONFIG {
	long instanceID;
	u_char ena;
	AUDIO_PROLOGIC2_MODE app_pl2_config;
};
typedef struct AUDIO_PROLOGIC2_CONFIG AUDIO_PROLOGIC2_CONFIG;

enum ENUM_SRC_MODE {
	ENUM_SRC_POOR = 0,
	ENUM_SRC_GOOD = 1,
};
typedef enum ENUM_SRC_MODE ENUM_SRC_MODE;

struct AUDIO_SRC_CONFIG {
	long instanceID;
	long mode;
};
typedef struct AUDIO_SRC_CONFIG AUDIO_SRC_CONFIG;

struct AUDIO_RPC_MIXER_MODE {
	long simpleMix;
	long exclusiveMode;
};
typedef struct AUDIO_RPC_MIXER_MODE AUDIO_RPC_MIXER_MODE;

struct AUDIO_MIXER_CONFIG {
	long instanceID;
	AUDIO_RPC_MIXER_MODE app_mixer_config;
};
typedef struct AUDIO_MIXER_CONFIG AUDIO_MIXER_CONFIG;

enum ENUM_EQUALIZER_GAIN {
	ENUM_EQUALIZER_GAIN_N12DB = -12,
	ENUM_EQUALIZER_GAIN_N11DB = -11,
	ENUM_EQUALIZER_GAIN_N10DB = -10,
	ENUM_EQUALIZER_GAIN_N9DB = -9,
	ENUM_EQUALIZER_GAIN_N8DB = -8,
	ENUM_EQUALIZER_GAIN_N7DB = -7,
	ENUM_EQUALIZER_GAIN_N6DB = -6,
	ENUM_EQUALIZER_GAIN_N5DB = -5,
	ENUM_EQUALIZER_GAIN_N4DB = -4,
	ENUM_EQUALIZER_GAIN_N3DB = -3,
	ENUM_EQUALIZER_GAIN_N2DB = -2,
	ENUM_EQUALIZER_GAIN_N1DB = -1,
	ENUM_EQUALIZER_GAIN_0DB = 0,
	ENUM_EQUALIZER_GAIN_1DB = 1,
	ENUM_EQUALIZER_GAIN_2DB = 2,
	ENUM_EQUALIZER_GAIN_3DB = 3,
	ENUM_EQUALIZER_GAIN_4DB = 4,
	ENUM_EQUALIZER_GAIN_5DB = 5,
	ENUM_EQUALIZER_GAIN_6DB = 6,
	ENUM_EQUALIZER_GAIN_7DB = 7,
	ENUM_EQUALIZER_GAIN_8DB = 8,
	ENUM_EQUALIZER_GAIN_9DB = 9,
	ENUM_EQUALIZER_GAIN_10DB = 10,
	ENUM_EQUALIZER_GAIN_11DB = 11,
	ENUM_EQUALIZER_GAIN_12DB = 12,
};
typedef enum ENUM_EQUALIZER_GAIN ENUM_EQUALIZER_GAIN;

enum ENUM_EQUALIZER_MODE {
	ENUM_EQUALIZER_RESERVED = 0,
	ENUM_EQUALIZER_MODE_POP = 1,
	ENUM_EQUALIZER_MODE_LIVE = 2,
	ENUM_EQUALIZER_MODE_CLUB = 3,
	ENUM_EQUALIZER_MODE_ROCK = 4,
	ENUM_EQUALIZER_MODE_BASS = 5,
	ENUM_EQUALIZER_MODE_TREBLE = 6,
	ENUM_EQUALIZER_MODE_VOCAL = 7,
	ENUM_EQUALIZER_MODE_POWERFUL = 8,
	ENUM_EQUALIZER_MODE_DANCE = 9,
	ENUM_EQUALIZER_MODE_SOFT = 10,
	ENUM_EQUALIZER_MODE_PARTY = 11,
	ENUM_EQUALIZER_MODE_CLASSICAL = 12,
};
typedef enum ENUM_EQUALIZER_MODE ENUM_EQUALIZER_MODE;

struct AUDIO_RPC_EQUALIZER_MODE {
	long mode;
	long gain[10];
};
typedef struct AUDIO_RPC_EQUALIZER_MODE AUDIO_RPC_EQUALIZER_MODE;

enum ENUM_EQUALIZER_ENA {
	ENUM_EQUALIZER_OFF = 0,
	ENUM_EQUALIZER_ON = 1,
};
typedef enum ENUM_EQUALIZER_ENA ENUM_EQUALIZER_ENA;

enum ENUM_GBL_VAR_EQUALIZER_ID {
	ENUM_EQUALIZER_PP = 0,
	ENUM_EQUALIZER_MIC = 1,
	ENUM_EQUALIZER_AUX = 2,
};
typedef enum ENUM_GBL_VAR_EQUALIZER_ID ENUM_GBL_VAR_EQUALIZER_ID;

struct AUDIO_EQUALIZER_CONFIG {
	long instanceID;
	int gbl_var_eq_ID;
	u_char ena;
	AUDIO_RPC_EQUALIZER_MODE app_eq_config;
};
typedef struct AUDIO_EQUALIZER_CONFIG AUDIO_EQUALIZER_CONFIG;

enum ENUM_BASS_MANAGEMENT_CUTOFFFREQ {
	ENUM_BASS_MANAGEMENT_80_HZ = 0,
	ENUM_BASS_MANAGEMENT_100_HZ = 1,
	ENUM_BASS_MANAGEMENT_120_HZ = 2,
};
typedef enum ENUM_BASS_MANAGEMENT_CUTOFFFREQ ENUM_BASS_MANAGEMENT_CUTOFFFREQ;

enum ENUM_BASS_MANAGEMENT_MODE {
	ENUM_BASS_MANAGEMENT_MODE_0 = 0,
	ENUM_BASS_MANAGEMENT_MODE_1 = 1,
	ENUM_BASS_MANAGEMENT_MODE_2 = 2,
	ENUM_BASS_MANAGEMENT_MODE_3 = 3,
	ENUM_BASS_MANAGEMENT_SIMPLIFIED = 4,
	ENUM_BASS_MANAGEMENT_CAR = 5,
	ENUM_BASS_MANAGEMENT_DIGITAL_0 = 6,
	ENUM_BASS_MANAGEMENT_DIGITAL_1 = 7,
};
typedef enum ENUM_BASS_MANAGEMENT_MODE ENUM_BASS_MANAGEMENT_MODE;

enum ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA {
	ENUM_BASS_MANAGEMENT_SUBWOOFER_OFF = 0,
	ENUM_BASS_MANAGEMENT_SUBWOOFER_ON = 1,
};
typedef enum ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA;

struct AUDIO_RPC_BASS_MANAGEMENT_MODE {
	long cutoffFreq;
	long config_mode;
	long subwoofer_ena;
};
typedef struct AUDIO_RPC_BASS_MANAGEMENT_MODE AUDIO_RPC_BASS_MANAGEMENT_MODE;

enum ENUM_BASS_MANAGEMENT_ENA {
	ENUM_BASS_MANAGEMENT_OFF = 0,
	ENUM_BASS_MANAGEMENT_ON = 1,
};
typedef enum ENUM_BASS_MANAGEMENT_ENA ENUM_BASS_MANAGEMENT_ENA;

struct AUDIO_BASS_MANAGEMENT_CONFIG {
	long instanceID;
	u_char ena;
	AUDIO_RPC_BASS_MANAGEMENT_MODE app_bassmng_config;
};
typedef struct AUDIO_BASS_MANAGEMENT_CONFIG AUDIO_BASS_MANAGEMENT_CONFIG;

struct AUDIO_RPC_DVS_MODE {
	long wide_mode;
};
typedef struct AUDIO_RPC_DVS_MODE AUDIO_RPC_DVS_MODE;

enum ENUM_DVS_ENA {
	ENUM_DVS_OFF = 0,
	ENUM_DVS_ON = 1,
};
typedef enum ENUM_DVS_ENA ENUM_DVS_ENA;

struct AUDIO_DVS_CONFIG {
	long instanceID;
	u_char ena;
	AUDIO_RPC_DVS_MODE app_dvs_config;
};
typedef struct AUDIO_DVS_CONFIG AUDIO_DVS_CONFIG;

enum ENUM_KEY_SHIFT_ENA {
	ENUM_KEY_SHIFT_OFF = 0,
	ENUM_KEY_SHIFT_ON = 1,
};
typedef enum ENUM_KEY_SHIFT_ENA ENUM_KEY_SHIFT_ENA;

enum ENUM_KEY_SHIFT_STONE {
	ENUM_KEY_SHIFT_STONE_N24 = -24,
	ENUM_KEY_SHIFT_STONE_N23 = -23,
	ENUM_KEY_SHIFT_STONE_N22 = -22,
	ENUM_KEY_SHIFT_STONE_N21 = -21,
	ENUM_KEY_SHIFT_STONE_N20 = -20,
	ENUM_KEY_SHIFT_STONE_N19 = -19,
	ENUM_KEY_SHIFT_STONE_N18 = -18,
	ENUM_KEY_SHIFT_STONE_N17 = -17,
	ENUM_KEY_SHIFT_STONE_N16 = -16,
	ENUM_KEY_SHIFT_STONE_N15 = -15,
	ENUM_KEY_SHIFT_STONE_N14 = -14,
	ENUM_KEY_SHIFT_STONE_N13 = -13,
	ENUM_KEY_SHIFT_STONE_N12 = -12,
	ENUM_KEY_SHIFT_STONE_N11 = -11,
	ENUM_KEY_SHIFT_STONE_N10 = -10,
	ENUM_KEY_SHIFT_STONE_N9 = -9,
	ENUM_KEY_SHIFT_STONE_N8 = -8,
	ENUM_KEY_SHIFT_STONE_N7 = -7,
	ENUM_KEY_SHIFT_STONE_N6 = -6,
	ENUM_KEY_SHIFT_STONE_N5 = -5,
	ENUM_KEY_SHIFT_STONE_N4 = -4,
	ENUM_KEY_SHIFT_STONE_N3 = -3,
	ENUM_KEY_SHIFT_STONE_N2 = -2,
	ENUM_KEY_SHIFT_STONE_N1 = -1,
	ENUM_KEY_SHIFT_STONE_0 = 0,
	ENUM_KEY_SHIFT_STONE_1 = 1,
	ENUM_KEY_SHIFT_STONE_2 = 2,
	ENUM_KEY_SHIFT_STONE_3 = 3,
	ENUM_KEY_SHIFT_STONE_4 = 4,
	ENUM_KEY_SHIFT_STONE_5 = 5,
	ENUM_KEY_SHIFT_STONE_6 = 6,
	ENUM_KEY_SHIFT_STONE_7 = 7,
	ENUM_KEY_SHIFT_STONE_8 = 8,
	ENUM_KEY_SHIFT_STONE_9 = 9,
	ENUM_KEY_SHIFT_STONE_10 = 10,
	ENUM_KEY_SHIFT_STONE_11 = 11,
	ENUM_KEY_SHIFT_STONE_12 = 12,
	ENUM_KEY_SHIFT_STONE_13 = 13,
	ENUM_KEY_SHIFT_STONE_14 = 14,
	ENUM_KEY_SHIFT_STONE_15 = 15,
	ENUM_KEY_SHIFT_STONE_16 = 16,
	ENUM_KEY_SHIFT_STONE_17 = 17,
	ENUM_KEY_SHIFT_STONE_18 = 18,
	ENUM_KEY_SHIFT_STONE_19 = 19,
	ENUM_KEY_SHIFT_STONE_20 = 20,
	ENUM_KEY_SHIFT_STONE_21 = 21,
	ENUM_KEY_SHIFT_STONE_22 = 22,
	ENUM_KEY_SHIFT_STONE_23 = 23,
	ENUM_KEY_SHIFT_STONE_24 = 24,
};
typedef enum ENUM_KEY_SHIFT_STONE ENUM_KEY_SHIFT_STONE;

struct AUDIO_KEY_SHIFT_CONFIG {
	long instanceID;
	u_char ena;
	long pinID;
	long semitone;
};
typedef struct AUDIO_KEY_SHIFT_CONFIG AUDIO_KEY_SHIFT_CONFIG;

enum ENUM_REVERB_ENA {
	ENUM_REVERB_OFF = 0,
	ENUM_REVERB_ON = 1,
};
typedef enum ENUM_REVERB_ENA ENUM_REVERB_ENA;

enum ENUM_REVERB_MODE {
	ENUM_Cathedral_1 = 0,
	ENUM_Cathedral_2 = 1,
	ENUM_Hall = 2,
	ENUM_Room = 3,
	ENUM_Basement = 4,
};
typedef enum ENUM_REVERB_MODE ENUM_REVERB_MODE;

struct AUDIO_REVERB_CONFIG {
	long instanceID;
	u_char ena;
	long pinID;
	long reverb_mode;
};
typedef struct AUDIO_REVERB_CONFIG AUDIO_REVERB_CONFIG;

enum ENUM_VOCAL_REMOVER_ENA {
	ENUM_VOCAL_REMOVER_OFF = 0,
	ENUM_VOCAL_REMOVER_ON = 1,
};
typedef enum ENUM_VOCAL_REMOVER_ENA ENUM_VOCAL_REMOVER_ENA;

enum ENUM_VOCAL_REMOVER_MODE {
	ENUM_VOCAL_REMOVER_ADVANCED = 0,
	ENUM_VOCAL_REMOVER_CLASSICAL = 1,
};
typedef enum ENUM_VOCAL_REMOVER_MODE ENUM_VOCAL_REMOVER_MODE;

struct AUDIO_VOCAL_REMOVER_CONFIG {
	long instanceID;
	u_char ena;
	long vr_mode;
	long pinID;
};
typedef struct AUDIO_VOCAL_REMOVER_CONFIG AUDIO_VOCAL_REMOVER_CONFIG;

struct AUDIO_RPC_DEC_INIT {
	long temp;
};
typedef struct AUDIO_RPC_DEC_INIT AUDIO_RPC_DEC_INIT;

struct AUDIO_RPC_ENC_INIT {
	long instanceID;
	long temp;
};
typedef struct AUDIO_RPC_ENC_INIT AUDIO_RPC_ENC_INIT;

struct AUDIO_RPC_ENC_SET_BITRATE {
	long instanceID;
	long bitrate;
};
typedef struct AUDIO_RPC_ENC_SET_BITRATE AUDIO_RPC_ENC_SET_BITRATE;

struct AUDIO_RPC_ENC_COMMAND {
	long instanceID;
	AUDIO_ENC_CFG enc_config;
};
typedef struct AUDIO_RPC_ENC_COMMAND AUDIO_RPC_ENC_COMMAND;

struct AUDIO_RPC_DEBUG_MEMORY {
	int AudioFWVersionNumber;
	char audioVersionNumber[12];
	int64_t AudioDemuxPTS;
	int64_t AudioOutPTS;
	int64_t DecoderPTS;
	int64_t FreeRun;
	int contextSwitchTimes;
	int taskNumber;
	int ISRNumber;
	int DSRNumber;
	int EPC;
	int exceptionCause;
	int RPC_Status;
	int Reserve[8];
};
typedef struct AUDIO_RPC_DEBUG_MEMORY AUDIO_RPC_DEBUG_MEMORY;

struct AUDIO_RPC_ENC_INFO {
	long temp;
};
typedef struct AUDIO_RPC_ENC_INFO AUDIO_RPC_ENC_INFO;

struct AUDIO_RPC_ENC_DV_MIXER {
	long temp;
};
typedef struct AUDIO_RPC_ENC_DV_MIXER AUDIO_RPC_ENC_DV_MIXER;

struct AUDIO_RPC_AO_INIT {
	long temp;
};
typedef struct AUDIO_RPC_AO_INIT AUDIO_RPC_AO_INIT;

struct AUDIO_RPC_AO_SET_EQUALIZER {
	long temp;
};
typedef struct AUDIO_RPC_AO_SET_EQUALIZER AUDIO_RPC_AO_SET_EQUALIZER;

struct AUDIO_AO_RPC_CONFIG_DELAY_CONTROL {
	long temp;
};
typedef struct AUDIO_AO_RPC_CONFIG_DELAY_CONTROL AUDIO_AO_RPC_CONFIG_DELAY_CONTROL;

struct AUDIO_RPC_AO_CONFIG_KARAOKE {
	long temp;
};
typedef struct AUDIO_RPC_AO_CONFIG_KARAOKE AUDIO_RPC_AO_CONFIG_KARAOKE;

struct AUDIO_RPC_AO_MIXER {
	long temp;
};
typedef struct AUDIO_RPC_AO_MIXER AUDIO_RPC_AO_MIXER;

struct AUDIO_RPC_PP_CFG {
	long temp;
};
typedef struct AUDIO_RPC_PP_CFG AUDIO_RPC_PP_CFG;

struct AUDIO_RPC_PP_MUTE {
	long temp;
};
typedef struct AUDIO_RPC_PP_MUTE AUDIO_RPC_PP_MUTE;

struct AUDIO_RPC_AO_DAC {
	long temp;
};
typedef struct AUDIO_RPC_AO_DAC AUDIO_RPC_AO_DAC;

struct AUDIO_RPC_PP_PROLOGIC {
	long temp;
};
typedef struct AUDIO_RPC_PP_PROLOGIC AUDIO_RPC_PP_PROLOGIC;

enum AUDIO_AGC_MODE {
	ENUM_AUDIO_AGC_OFF = 0,
	ENUM_AUDIO_AGC_NIGHT_MODE = 1,
	ENUM_AUDIO_AGC_COMFORT_LISTEN_MODE = 2,
};
typedef enum AUDIO_AGC_MODE AUDIO_AGC_MODE;

enum AUDIO_KARAOKE_MODE {
	KARAOKE_NO_VOCALS = 0,
	KARAOKE_VOCAL1 = 1,
	KARAOKE_VOCAL2 = 2,
	KARAOKE_BOTH_VOCALS = 3,
};
typedef enum AUDIO_KARAOKE_MODE AUDIO_KARAOKE_MODE;

enum AUDIO_CONFIG_CMD_MSG {
	AUDIO_CONFIG_CMD_SPEAKER = 0,
	AUDIO_CONFIG_CMD_AGC = 1,
	AUDIO_CONFIG_CMD_SPDIF = 2,
	AUDIO_CONFIG_CMD_VOLUME = 3,
	AUDIO_CONFIG_CMD_MUTE = 4,
	AUDIO_CONFIG_CMD_AO_MIC = 5,
	AUDIO_CONFIG_CMD_AO_AUX = 6,
	AUDIO_CONFIG_CMD_AO_ECHO_REVERB = 7,
	AUDIO_CONFIG_CMD_AO_MIC1_VOLUME = 8,
	AUDIO_CONFIG_CMD_AO_MIC2_VOLUME = 9,
	AUDIO_CONFIG_CMD_AO_DEC_VOLUME = 10,
	AUDIO_CONFIG_CMD_AO_AUX_VOLUME = 11,
	AUDIO_CONFIG_CMD_DAC_SWITCH = 12,
	AUDIO_CONFIG_CMD_DD_DUALMONO = 13,
	AUDIO_CONFIG_CMD_DD_SCALE = 14,
	AUDIO_CONFIG_CMD_DD_DOWNMIXMODE = 15,
	AUDIO_CONFIG_CMD_DD_COMP = 16,
	AUDIO_CONFIG_CMD_DD_LFE = 17,
	AUDIO_CONFIG_CMD_DD_STEREOMIX = 18,
	AUDIO_CONFIG_CMD_DIGITAL_OUT = 19,
	AUDIO_CONFIG_CMD_EXCLUSIVE = 20,
	AUDIO_CONFIG_CMD_AC3_SPDIF_RAW = 21,
	AUDIO_CONFIG_CMD_AC3_HDMI_RAW = 22,
	AUDIO_CONFIG_CMD_DTS_SPDIF_RAW = 23,
	AUDIO_CONFIG_CMD_DTS_HDMI_RAW = 24,
	AUDIO_CONFIG_CMD_MPG_SPDIF_RAW = 25,
	AUDIO_CONFIG_CMD_MPG_HDMI_RAW = 26,
	AUDIO_CONFIG_CMD_AAC_SPDIF_RAW = 27,
	AUDIO_CONFIG_CMD_AAC_HDMI_RAW = 28,
	AUDIO_CONFIG_CMD_MLP_HDMI_RAW = 29,
	AUDIO_CONFIG_CMD_DDP_HDMI_RAW = 30,
	AUDIO_CONFIG_CMD_HDMI_CHANNEL_OUT = 31,
	AUDIO_CONFIG_CMD_FORCE_CHANNEL_CODEC = 32,
	AUDIO_CONFIG_CMD_MLP_SPDIF_RAW = 33,
	AUDIO_CONFIG_CMD_DDP_SPDIF_RAW = 34,
	AUDIO_CONFIG_CMD_MAX_OUTPUT_SAMPLERATE = 35,
	AUDIO_CONFIG_CMD_USB_DEVICE_SUPPORT_SAMPLERATE = 36,
	AUDIO_CONFIG_CMD_KARAOKE_MODE = 37,
	AUDIO_CONFIG_CMD_BRAZIL_LATM_AAC = 38,
	AUDIO_CONFIG_CMD_DRC_PERCENT = 39,
	AUDIO_CONFIG_CMD_LICENSE_MODE = 40,
	AUDIO_CONFIG_CMD_AUDIO_TYPE_PRIORITY = 41,
	AUDIO_CONFIG_CMD_SPDIF_OUTPUT_SWITCH = 42,
	AUDIO_CONFIG_CMD_CUSTOMIZE_REQUEST = 43,
	AUDIO_CONFIG_CMD_DEC_PLAYBACK_RATE = 44,
	AUDIO_CONFIG_CMD_SAMPLERATE_TOLERANCE = 45,
	AUDIO_CONFIG_CMD_KARAOKE_GENDER_CHANGE = 46,
	AUDIO_CONFIG_CMD_DAC_OUTPUT_SWITCH = 47,
	AUDIO_CONFIG_CMD_SET_DEC_DELAY_RP = 48,
	AUDIO_CONFIG_CMD_MPEG2_AAC_LOW_SR_SPDIF_RAW = 49,
	AUDIO_CONFIG_CMD_MPEG2_AAC_LOW_SR_HDMI_RAW = 50,
	AUDIO_CONFIG_CMD_MPEG4_AAC_SPDIF_RAW = 51,
	AUDIO_CONFIG_CMD_MPEG4_AAC_HDMI_RAW = 52,
};
typedef enum AUDIO_CONFIG_CMD_MSG AUDIO_CONFIG_CMD_MSG;

struct AUDIO_CONFIG_COMMAND {
	AUDIO_CONFIG_CMD_MSG msgID;
	u_int value[6];
};
typedef struct AUDIO_CONFIG_COMMAND AUDIO_CONFIG_COMMAND;

enum AUDISTRY_FEATURE_CMD_MSG {
	ENUM_AUDISTRY_BUNDLE = 0,
	ENUM_AUDISTRY_TWOUP = 1,
	ENUM_AUDISTRY_STEREOWRAPPER = 2,
	ENUM_AUDISTRY_HEADSPACE = 3,
	ENUM_AUDISTRY_LATENIGHT = 4,
	ENUM_AUDISTRY_VOLUME = 5,
	ENUM_AUDISTRY_RUMBLER = 6,
};
typedef enum AUDISTRY_FEATURE_CMD_MSG AUDISTRY_FEATURE_CMD_MSG;

enum AUDISTRY_TWOUP_PARAMETER {
	ENUM_TWOUP_ENABLE = 0,
	ENUM_TWOUP_DETECTOR = 1,
};
typedef enum AUDISTRY_TWOUP_PARAMETER AUDISTRY_TWOUP_PARAMETER;

enum AUDISTRY_HEADSPACE_PARAMETER {
	ENUM_HEADSPACE_ENABLE = 0,
	ENUM_HEADSPACE_MODE = 1,
};
typedef enum AUDISTRY_HEADSPACE_PARAMETER AUDISTRY_HEADSPACE_PARAMETER;

enum AUDISTRY_STEREOWRAPPER_PARAMETER {
	ENUM_STEREOWRAPPER_ENABLE = 0,
	ENUM_STEREOWRAPPER_WIDTH = 1,
};
typedef enum AUDISTRY_STEREOWRAPPER_PARAMETER AUDISTRY_STEREOWRAPPER_PARAMETER;

enum AUDISTRY_LATENIGHT_PARAMETER {
	ENUM_LATENIGHT_ENABLE = 0,
	ENUM_LATENIGHT_LEVEL = 1,
	ENUM_LATENIGHT_DEPTH = 2,
};
typedef enum AUDISTRY_LATENIGHT_PARAMETER AUDISTRY_LATENIGHT_PARAMETER;

enum AUDISTRY_VOLUME_PARAMETER {
	ENUM_VOLUME_ENABLE = 0,
	ENUM_VOLUME_GAIN = 1,
};
typedef enum AUDISTRY_VOLUME_PARAMETER AUDISTRY_VOLUME_PARAMETER;

enum AUDISTRY_RUMBLER_PARAMETER {
	ENUM_RUMBLER_ENABLE = 0,
	ENUM_RUMBLER_CUTOFF = 1,
	ENUM_RUMBLER_BOOST = 2,
	ENUM_RUMBLER_LEVEL = 3,
};
typedef enum AUDISTRY_RUMBLER_PARAMETER AUDISTRY_RUMBLER_PARAMETER;

struct AUDISTRY_CONFIG_COMMAND {
	AUDISTRY_FEATURE_CMD_MSG feature;
	u_int parameter;
	int value;
};
typedef struct AUDISTRY_CONFIG_COMMAND AUDISTRY_CONFIG_COMMAND;

enum AUDIO_AO_MIC_CONFIG {
	ENUM_AUDIO_AO_MIC_OFF = 0,
	ENUM_AUDIO_AO_MIC1_ON = 1,
	ENUM_AUDIO_AO_MIC2_ON = 2,
	ENUM_AUDIO_AO_MIC1_MIC2_ON = 3,
};
typedef enum AUDIO_AO_MIC_CONFIG AUDIO_AO_MIC_CONFIG;

enum AUDIO_AO_AUX_CONFIG {
	ENUM_AUDIO_AO_AUX_OFF = 0,
	ENUM_AUDIO_AO_AUX_ON = 1,
};
typedef enum AUDIO_AO_AUX_CONFIG AUDIO_AO_AUX_CONFIG;

enum AUDIO_AO_ECHO_REVERB_CONFIG {
	ENUM_AUDIO_AO_ECHO_REVERB_OFF = 0,
	ENUM_AUDIO_AO_ECHO_ON = 1,
	ENUM_AUDIO_AO_REVERB_ON = 2,
	ENUM_AUDIO_AO_ECHO_ON_REVERB_ON = 3,
};
typedef enum AUDIO_AO_ECHO_REVERB_CONFIG AUDIO_AO_ECHO_REVERB_CONFIG;

struct AUDIO_RPC_ECHO_MODE {
	long mode;
	long delay;
	long fdbk_gain;
};
typedef struct AUDIO_RPC_ECHO_MODE AUDIO_RPC_ECHO_MODE;

enum AUDIO_AO_ECHO_DELAY_MODE {
	ENUM_AUDIO_AO_ECHO_0MS = 0,
	ENUM_AUDIO_AO_ECHO_10MS = 2,
	ENUM_AUDIO_AO_ECHO_20MS = 4,
	ENUM_AUDIO_AO_ECHO_30MS = 6,
	ENUM_AUDIO_AO_ECHO_40MS = 8,
	ENUM_AUDIO_AO_ECHO_50MS = 9,
	ENUM_AUDIO_AO_ECHO_60MS = 11,
	ENUM_AUDIO_AO_ECHO_70MS = 13,
	ENUM_AUDIO_AO_ECHO_80MS = 15,
	ENUM_AUDIO_AO_ECHO_90MS = 17,
	ENUM_AUDIO_AO_ECHO_100MS = 19,
	ENUM_AUDIO_AO_ECHO_110MS = 21,
	ENUM_AUDIO_AO_ECHO_120MS = 23,
	ENUM_AUDIO_AO_ECHO_130MS = 24,
	ENUM_AUDIO_AO_ECHO_140MS = 26,
	ENUM_AUDIO_AO_ECHO_150MS = 28,
	ENUM_AUDIO_AO_ECHO_160MS = 30,
	ENUM_AUDIO_AO_ECHO_170MS = 32,
	ENUM_AUDIO_AO_ECHO_180MS = 34,
	ENUM_AUDIO_AO_ECHO_190MS = 36,
	ENUM_AUDIO_AO_ECHO_200MS = 38,
	ENUM_AUDIO_AO_ECHO_215MS = 41,
	ENUM_AUDIO_AO_ECHO_230MS = 43,
	ENUM_AUDIO_AO_ECHO_240MS = 45,
	ENUM_AUDIO_AO_ECHO_250MS = 47,
	ENUM_AUDIO_AO_ECHO_260MS = 49,
	ENUM_AUDIO_AO_ECHO_270MS = 51,
	ENUM_AUDIO_AO_ECHO_285MS = 54,
	ENUM_AUDIO_AO_ECHO_300MS = 56,
	ENUM_AUDIO_AO_ECHO_310MS = 58,
	ENUM_AUDIO_AO_ECHO_320MS = 60,
	ENUM_AUDIO_AO_ECHO_330MS = 62,
};
typedef enum AUDIO_AO_ECHO_DELAY_MODE AUDIO_AO_ECHO_DELAY_MODE;

enum AUDIO_HDMI_CODING_TYPE {
	AUDIO_HDMI_CODING_TYPE_REFER = 0,
	AUDIO_HDMI_CODING_TYPE_PCM = 1,
	AUDIO_HDMI_CODING_TYPE_AC_3 = 2,
	AUDIO_HDMI_CODING_TYPE_MPEG1 = 3,
	AUDIO_HDMI_CODING_TYPE_MP3 = 4,
	AUDIO_HDMI_CODING_TYPE_MPEG2 = 5,
	AUDIO_HDMI_CODING_TYPE_AAC = 6,
	AUDIO_HDMI_CODING_TYPE_DTS = 7,
	AUDIO_HDMI_CODING_TYPE_ATRAC = 8,
	AUDIO_HDMI_CODING_TYPE_ONE_BIT_AUDIO = 9,
	AUDIO_HDMI_CODING_TYPE_DDP = 10,
	AUDIO_HDMI_CODING_TYPE_DTSHD = 11,
	AUDIO_HDMI_CODING_TYPE_MLP = 12,
};
typedef enum AUDIO_HDMI_CODING_TYPE AUDIO_HDMI_CODING_TYPE;

enum AUDIO_HDMI_CHANNEL_COUNT {
	AUDIO_HDMI_CHANNEL_COUNT_REFER = 0,
	AUDIO_HDMI_CHANNEL_COUNT_2 = 1,
	AUDIO_HDMI_CHANNEL_COUNT_3 = 2,
	AUDIO_HDMI_CHANNEL_COUNT_4 = 3,
	AUDIO_HDMI_CHANNEL_COUNT_5 = 4,
	AUDIO_HDMI_CHANNEL_COUNT_6 = 5,
	AUDIO_HDMI_CHANNEL_COUNT_7 = 6,
	AUDIO_HDMI_CHANNEL_COUNT_8 = 7,
};
typedef enum AUDIO_HDMI_CHANNEL_COUNT AUDIO_HDMI_CHANNEL_COUNT;

enum AUDIO_HDMI_SAMPLING_FREQ {
	AUDIO_HDMI_SAMPLING_FREQ_REFER = 0,
	AUDIO_HDMI_SAMPLING_FREQ_32K = 1,
	AUDIO_HDMI_SAMPLING_FREQ_44K1 = 2,
	AUDIO_HDMI_SAMPLING_FREQ_48K = 3,
	AUDIO_HDMI_SAMPLING_FREQ_88K2 = 4,
	AUDIO_HDMI_SAMPLING_FREQ_96K = 5,
	AUDIO_HDMI_SAMPLING_FREQ_176K4 = 6,
	AUDIO_HDMI_SAMPLING_FREQ_192K = 7,
};
typedef enum AUDIO_HDMI_SAMPLING_FREQ AUDIO_HDMI_SAMPLING_FREQ;

enum AUDIO_HDMI_SAMPLE_SIZE {
	AUDIO_HDMI_SAMPLE_SIZE_REFER = 0,
	AUDIO_HDMI_SAMPLE_SIZE_16BIT = 1,
	AUDIO_HDMI_SAMPLE_SIZE_20BIT = 2,
	AUDIO_HDMI_SAMPLE_SIZE_24BIT = 3,
};
typedef enum AUDIO_HDMI_SAMPLE_SIZE AUDIO_HDMI_SAMPLE_SIZE;

struct AUDIO_HDMI_SETTING_INFO {
	AUDIO_HDMI_CODING_TYPE coding_type;
	AUDIO_HDMI_CHANNEL_COUNT channel_count;
	AUDIO_HDMI_SAMPLING_FREQ sample_freq;
	AUDIO_HDMI_SAMPLE_SIZE sample_size;
	u_int max_bit_rate_divided_by_8KHz;
	u_char lpcm_speaker_allocation[3];
	u_int lpcm_level_shift_value;
	u_char mute;
};
typedef struct AUDIO_HDMI_SETTING_INFO AUDIO_HDMI_SETTING_INFO;

enum ENUM_AUDIO_HDMI_EDID_ENABLE {
	ENUM_AUDIO_EDID_DISABLE = 0,
	ENUM_AUDIO_EDID_ENABLE = 1,
	ENUM_AUDIO_EDID_START = 2,
	ENUM_AUDIO_EDID_END = 3,
};
typedef enum ENUM_AUDIO_HDMI_EDID_ENABLE ENUM_AUDIO_HDMI_EDID_ENABLE;

struct AUDIO_HDMI_OUT_EDID_DATA {
	long HDMI_output_enable;
	long EDID_DATA_addr;
};
typedef struct AUDIO_HDMI_OUT_EDID_DATA AUDIO_HDMI_OUT_EDID_DATA;

struct AUDIO_HDMI_OUT_EDID_DATA2 {
	long Version;
	long HDMI_output_enable;
	long EDID_DATA_addr;
};
typedef struct AUDIO_HDMI_OUT_EDID_DATA2 AUDIO_HDMI_OUT_EDID_DATA2;

struct AUDIO_HDMI_OUT_VSDB_DATA {
	long HDMI_VSDB_delay;
};
typedef struct AUDIO_HDMI_OUT_VSDB_DATA AUDIO_HDMI_OUT_VSDB_DATA;

enum HDMI_VIDEO_TYPE {
	ENUM_HDMI_VIDEO_TYPE_SD = 0,
	ENUM_HDMI_VIDEO_TYPE_HD = 1,
};
typedef enum HDMI_VIDEO_TYPE HDMI_VIDEO_TYPE;

struct HDMI_INFO {
	long video_type;
};
typedef struct HDMI_INFO HDMI_INFO;

enum AUDIO_MIC_DELAY_SLOT {
	ENUM_MIC_DELAY_SLOT_LEVEL_0 = 0,
	ENUM_MIC_DELAY_SLOT_LEVEL_1 = 2,
	ENUM_MIC_DELAY_SLOT_LEVEL_2 = 4,
	ENUM_MIC_DELAY_SLOT_LEVEL_3 = 6,
	ENUM_MIC_DELAY_SLOT_LEVEL_4 = 8,
	ENUM_MIC_DELAY_SLOT_LEVEL_5 = 10,
	ENUM_MIC_DELAY_SLOT_LEVEL_6 = 12,
	ENUM_MIC_DELAY_SLOT_LEVEL_7 = 14,
	ENUM_MIC_DELAY_SLOT_LEVEL_8 = 16,
	ENUM_MIC_DELAY_SLOT_LEVEL_9 = 18,
	ENUM_MIC_DELAY_SLOT_LEVEL_10 = 20,
	ENUM_MIC_DELAY_SLOT_LEVEL_11 = 22,
	ENUM_MIC_DELAY_SLOT_LEVEL_12 = 24,
	ENUM_MIC_DELAY_SLOT_LEVEL_13 = 26,
	ENUM_MIC_DELAY_SLOT_LEVEL_14 = 28,
	ENUM_MIC_DELAY_SLOT_LEVEL_15 = 30,
	ENUM_MIC_DELAY_SLOT_LEVEL_16 = 32,
	ENUM_MIC_DELAY_SLOT_LEVEL_17 = 34,
	ENUM_MIC_DELAY_SLOT_LEVEL_18 = 36,
	ENUM_MIC_DELAY_SLOT_LEVEL_19 = 38,
	ENUM_MIC_DELAY_SLOT_LEVEL_20 = 40,
};
typedef enum AUDIO_MIC_DELAY_SLOT AUDIO_MIC_DELAY_SLOT;

enum AUDIO_VOLUME_LEVEL {
	ENUM_AUDIO_VOLUME_LEVEL_0_DB = 0,
	ENUM_AUDIO_VOLUME_LEVEL_N1_DB = 1,
	ENUM_AUDIO_VOLUME_LEVEL_N2_DB = 2,
	ENUM_AUDIO_VOLUME_LEVEL_N3_DB = 3,
	ENUM_AUDIO_VOLUME_LEVEL_N4_DB = 4,
	ENUM_AUDIO_VOLUME_LEVEL_N5_DB = 5,
	ENUM_AUDIO_VOLUME_LEVEL_N6_DB = 6,
	ENUM_AUDIO_VOLUME_LEVEL_N7_DB = 7,
	ENUM_AUDIO_VOLUME_LEVEL_N8_DB = 8,
	ENUM_AUDIO_VOLUME_LEVEL_N9_DB = 9,
	ENUM_AUDIO_VOLUME_LEVEL_N10_DB = 10,
	ENUM_AUDIO_VOLUME_LEVEL_N11_DB = 11,
	ENUM_AUDIO_VOLUME_LEVEL_N12_DB = 12,
	ENUM_AUDIO_VOLUME_LEVEL_N13_DB = 13,
	ENUM_AUDIO_VOLUME_LEVEL_N14_DB = 14,
	ENUM_AUDIO_VOLUME_LEVEL_N15_DB = 15,
	ENUM_AUDIO_VOLUME_LEVEL_N16_DB = 16,
	ENUM_AUDIO_VOLUME_LEVEL_N17_DB = 17,
	ENUM_AUDIO_VOLUME_LEVEL_N18_DB = 18,
	ENUM_AUDIO_VOLUME_LEVEL_N19_DB = 19,
	ENUM_AUDIO_VOLUME_LEVEL_N20_DB = 20,
	ENUM_AUDIO_VOLUME_LEVEL_N21_DB = 21,
	ENUM_AUDIO_VOLUME_LEVEL_N22_DB = 22,
	ENUM_AUDIO_VOLUME_LEVEL_N23_DB = 23,
	ENUM_AUDIO_VOLUME_LEVEL_N24_DB = 24,
	ENUM_AUDIO_VOLUME_LEVEL_N25_DB = 25,
	ENUM_AUDIO_VOLUME_LEVEL_N26_DB = 26,
	ENUM_AUDIO_VOLUME_LEVEL_N30_DB = 27,
	ENUM_AUDIO_VOLUME_LEVEL_N36_DB = 28,
	ENUM_AUDIO_VOLUME_LEVEL_N44_DB = 29,
	ENUM_AUDIO_VOLUME_LEVEL_N52_DB = 30,
	ENUM_AUDIO_VOLUME_LEVEL_MUTE = 31,
};
typedef enum AUDIO_VOLUME_LEVEL AUDIO_VOLUME_LEVEL;

enum AUDIO_LICENSE_CONTROL_MASK {
	BONDING_OPTION_PA = 0,
	BONDING_OPTION_DA = 15,
};
typedef enum AUDIO_LICENSE_CONTROL_MASK AUDIO_LICENSE_CONTROL_MASK;

struct AUDIO_RPC_DEC_FORMAT_INFO {
	enum AUDIO_DEC_TYPE type;
	u_short nChannels;
	u_short wBitsPerSample;
	long nSamplesPerSec;
	long nAvgBytesPerSec;
	long reserved[4];
};
typedef struct AUDIO_RPC_DEC_FORMAT_INFO AUDIO_RPC_DEC_FORMAT_INFO;

struct AUDIO_LICENSE_STATUS_CONFIG {
	long HighWord;
	long LowWord;
};
typedef struct AUDIO_LICENSE_STATUS_CONFIG AUDIO_LICENSE_STATUS_CONFIG;

enum AudioCodecControlBit {
	AUDIO_UNKNOWN_BIT = 0,
	AUDIO_MPEG_DECODER_BIT = 1,
	AUDIO_AC3_DECODER_BIT = 2,
	AUDIO_LPCM_DECODER_BIT = 3,
	AUDIO_DTS_DECODER_BIT = 4,
	AUDIO_WMA_DECODER_BIT = 5,
	AUDIO_AAC_DECODER_BIT = 6,
	AUDIO_VORBIS_DECODER_BIT = 7,
	AUDIO_DV_DECODER_BIT = 8,
	AUDIO_MLP_DECODER_BIT = 9,
	AUDIO_DDP_DECODER_BIT = 10,
	AUDIO_DTS_HD_DECODER_BIT = 11,
	AUDIO_WMA_PRO_DECODER_BIT = 12,
	AUDIO_MP4AAC_DECODER_BIT = 13,
	AUDIO_MP3_PRO_DECODER_BIT = 14,
	AUDIO_MP4HEAAC_DECODER_BIT = 15,
	AUDIO_RAW_AAC_DECODER_BIT = 16,
	AUDIO_RA1_DECODER_BIT = 17,
	AUDIO_RA2_DECODER_BIT = 18,
	AUDIO_ATRAC3_DECODER_BIT = 19,
	AUDIO_COOK_DECODER_BIT = 20,
	AUDIO_LSD_DECODER_BIT = 21,
	AUDIO_ADPCM_DECODER_BIT = 22,
	AUDIO_FLAC_DECODER_BIT = 23,
	AUDIO_ULAW_DECODER_BIT = 24,
	AUDIO_ALAW_DECODER_BIT = 25,
	AUDIO_ALAC_DECODER_BIT = 26,
	AUDIO_DTS_HIGH_RESOLUTION_DECODER_BIT = 27,
	AUDIO_DTS_LBR_DECODER_BIT = 28,
	AUDIO_DTS_MASTER_AUDIO_DECODER_BIT = 29,
	AUDIO_AMR_DECODER_BIT = 30,
	AUDIO_MIDI_DECODER_BIT = 31,
	AUDIO_APE_DECODER_BIT = 32,
	AUDIO_AVS_DECODER_BIT = 33,
	AUDIO_NELLYMOSER_DECODER_BIT = 34,
	AUDIO_WMA_LOSSLESS_DECODER_BIT = 35,
	AUDIO_ILBC_DECODER_BIT = 38,
	AUDIO_SILK_DECODER_BIT = 39,
	AUDIO_AMRWB_DECODER_BIT = 40,
	AUDIO_G729_DECODER_BIT = 41,
	AUDIO_AC3_MULTI_CH_ENCODER_BIT = 56,
	AUDIO_DTS_MULTI_CH_ENCODER_BIT = 57,
	AUDIO_ADPCM_ENCODER_BIT = 58,
	AUDIO_LPCM_ENCODER_BIT = 59,
	AUDIO_AAC_ENCODER_BIT = 60,
	AUDIO_MP2_ENCODER_BIT = 61,
	AUDIO_MP3_ENCODER_BIT = 62,
	AUDIO_AC3_ENCODER_BIT = 63,
};
typedef enum AudioCodecControlBit AudioCodecControlBit;

enum AUDIO_ENUM_PRIVAETINFO_TO_SYS {
	ENUM_PRIVATEINFO_AUDIO_HDMV_UNCERTAIN_TYPE = 0,
	ENUM_PRIVATEINFO_AUDIO_PCM_FORMAT_TYPE = 1,
	ENUM_PRIVATEINFO_AUDIO_OPEN_FILE = 2,
	ENUM_PRIVATEINFO_AUDIO_CLOSE_FILE = 3,
	ENUM_PRIVATEINFO_AUDIO_WRITE_FILE = 4,
	ENUM_PRIVATEINFO_AUDIO_DECODRER_MASSAGE = 5,
};
typedef enum AUDIO_ENUM_PRIVAETINFO_TO_SYS AUDIO_ENUM_PRIVAETINFO_TO_SYS;

struct AUDIO_RPC_PRIVATEINFO_TO_SYS {
	long instanceID;
	enum AUDIO_ENUM_PRIVAETINFO_TO_SYS type;
	long privateInfo[16];
};
typedef struct AUDIO_RPC_PRIVATEINFO_TO_SYS AUDIO_RPC_PRIVATEINFO_TO_SYS;

enum AUDIO_ENUM_PRIVAETINFO {
	ENUM_PRIVATEINFO_AUDIO_FORMAT_PARSER_CAPABILITY = 0,
	ENUM_PRIVATEINFO_AUDIO_DECODER_CAPABILITY = 1,
	ENUM_PRIVATEINFO_AUDIO_CONFIG_CMD_BS_INFO = 2,
	ENUM_PRIVATEINFO_AUDIO_CHECK_LPCM_ENDIANESS = 3,
	ENUM_PRIVATEINFO_AUDIO_CONFIG_CMD_AO_DELAY_INFO = 4,
	ENUM_PRIVATEINFO_AUDIO_AO_CHANNEL_VOLUME_LEVEL = 5,
	ENUM_PRIVATEINFO_AUDIO_GET_FLASH_PIN = 6,
	ENUM_PRIVATEINFO_AUDIO_RELEASE_FLASH_PIN = 7,
	ENUM_PRIVATEINFO_AUDIO_GET_MUTE_N_VOLUME = 8,
	ENUM_PRIVATEINFO_AUDIO_AO_MONITOR_FULLNESS = 9,
	ENUM_PRIVATEINFO_AUDIO_CONTROL_FLASH_VOLUME = 10,
	ENUM_PRIVATEINFO_AUDIO_CONTROL_DAC_SWITCH = 11,
	ENUM_PRIVATEINFO_AUDIO_PREPROCESS_CONFIG = 12,
	ENUM_PRIVATEINFO_AUDIO_CHECK_SECURITY_ID = 13,
};
typedef enum AUDIO_ENUM_PRIVAETINFO AUDIO_ENUM_PRIVAETINFO;

struct AUDIO_RPC_PRIVATEINFO_PARAMETERS {
	long instanceID;
	enum AUDIO_ENUM_PRIVAETINFO type;
	long privateInfo[16];
};
typedef struct AUDIO_RPC_PRIVATEINFO_PARAMETERS AUDIO_RPC_PRIVATEINFO_PARAMETERS;

struct AUDIO_RPC_PRIVATEINFO_RETURNVAL {
	long instanceID;
	long privateInfo[16];
};
typedef struct AUDIO_RPC_PRIVATEINFO_RETURNVAL AUDIO_RPC_PRIVATEINFO_RETURNVAL;

enum AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE {
	ENUM_MAX_OUTPUT_SAMPLERATE_UNLIMITED = 0,
	ENUM_MAX_OUTPUT_SAMPLERATE_48000 = 1,
	ENUM_MAX_OUTPUT_SAMPLERATE_96000 = 2,
	ENUM_MAX_OUTPUT_SAMPLERATE_192000 = 3,
};
typedef enum AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE;

struct AUDIO_PASSTHROUGH_INFO {
	u_long audioPassThroughType;
	u_short audioPassThroughFlag;
};
typedef struct AUDIO_PASSTHROUGH_INFO AUDIO_PASSTHROUGH_INFO;

enum AUDIO_SAMPLERATE {
	AUDIO_SAMPLERATE_32000 = 0x1,
	AUDIO_SAMPLERATE_44100 = 0x2,
	AUDIO_SAMPLERATE_48000 = 0x4,
	AUDIO_SAMPLERATE_88200 = 0x8,
	AUDIO_SAMPLERATE_96000 = 0x10,
	AUDIO_SAMPLERATE_176400 = 0x20,
	AUDIO_SAMPLERATE_192000 = 0x40,
	AUDIO_SAMPLERATE_22050 = 0x80,
	AUDIO_SAMPLERATE_24000 = 0x100,
	AUDIO_SAMPLERATE_64000 = 0x200,
	AUDIO_SAMPLERATE_16000 = 0x400,
	AUDIO_SAMPLERATE_8000 = 0x800,
	AUDIO_SAMPLERATE_11025 = 0x1000,
	AUDIO_SAMPLERATE_12000 = 0x2000,
};
typedef enum AUDIO_SAMPLERATE AUDIO_SAMPLERATE;

enum USB_AUDIO_IN_CMD {
	ENUM_USB_AUDIO_IN_CMD_DISCONNECT = 0,
	ENUM_USB_AUDIO_IN_CMD_CONNECT = 1,
	ENUM_USB_AUDIO_IN_CMD_STOP = 2,
	ENUM_USB_AUDIO_IN_CMD_START = 3,
	ENUM_USB_AUDIO_IN_CMD_GETINFO = 4,
	ENUM_USB_AUDIO_IN_CMD_SETINFO = 5,
	ENUM_USB_AUDIO_IN_CMD_MUTE = 6,
	ENUM_USB_AUDIO_IN_CMD_UNMUTE = 7,
	ENUM_USB_AUDIO_IN_CMD_MAX = 8,
};
typedef enum USB_AUDIO_IN_CMD USB_AUDIO_IN_CMD;

enum USB_AUDIO_IN_FORMAT {
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_8BITS = 0x1,
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_16BITS = 0x2,
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_24BITS = 0x4,
	ENUM_USB_AUDIO_IN_FORMAT_SIGNED_32BITS = 0x8,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_8BITS = 0x10,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_16BITS = 0x20,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_24BITS = 0x40,
	ENUM_USB_AUDIO_IN_FORMAT_UNSIGNED_32BITS = 0x80,
};
typedef enum USB_AUDIO_IN_FORMAT USB_AUDIO_IN_FORMAT;

struct USB_AUDIO_IN_INFO {
	u_long command;
	u_long usb_ai_ringbuf_addr;
	u_long usb_ai_samplerate;
	u_long usb_ai_format;
	u_long usb_ai_max_chnum;
};
typedef struct USB_AUDIO_IN_INFO USB_AUDIO_IN_INFO;

enum USB_AUDIO_IN_TYPE {
	ENUM_USB_AUDIO_IN_TYPE_VIDEO_CONFERENCE = 0,
	ENUM_USB_AUDIO_IN_TYPE_KARAOKE = 1,
};
typedef enum USB_AUDIO_IN_TYPE USB_AUDIO_IN_TYPE;

struct AUDIO_AI_DEVICE_USB_INFO {
	long instanceID;
	u_long type;
	USB_AUDIO_IN_INFO info;
};
typedef struct AUDIO_AI_DEVICE_USB_INFO AUDIO_AI_DEVICE_USB_INFO;

struct AUDIO_PREPROCESS_MIC_INFO {
	long data_length;
	long sec;
	long usec;
	long first_pts_low;
	long first_pts_high;
};
typedef struct AUDIO_PREPROCESS_MIC_INFO AUDIO_PREPROCESS_MIC_INFO;

struct AUDIO_DUMMY_DATA {
	long parameter[8];
};
typedef struct AUDIO_DUMMY_DATA AUDIO_DUMMY_DATA;

enum LPCM_ENDIANESS {
	LPCM_ENDIANESS_UNKNOWN = 0,
	LPCM_ENDIANESS_LITTLE = 1,
	LPCM_ENDIANESS_BIG = 2,
};
typedef enum LPCM_ENDIANESS LPCM_ENDIANESS;

enum AUDIO_SAMPLERATE_TOLERANCE {
	AUDIO_SAMPLERATE_TOLERANCE_NONE = 0,
	AUDIO_SAMPLERATE_TOLERANCE_MAXIMUM = 1,
	AUDIO_SAMPLERATE_TOLERANCE_CUSTOM = 2,
};
typedef enum AUDIO_SAMPLERATE_TOLERANCE AUDIO_SAMPLERATE_TOLERANCE;

struct AUDIO_CODEC_KEY_INFO {
	long key;
	long flag;
};
typedef struct AUDIO_CODEC_KEY_INFO AUDIO_CODEC_KEY_INFO;

enum AUDIO_AO_CHANNEL_OUT_SWAP {
	AUDIO_AO_CHANNEL_OUT_STEREO = 0x0,
	AUDIO_AO_CHANNEL_OUT_L_TO_R = 0x1,
	AUDIO_AO_CHANNEL_OUT_R_TO_L = 0x2,
	AUDIO_AO_CHANNEL_OUT_LR_SWAP = 0x3,
};
typedef enum AUDIO_AO_CHANNEL_OUT_SWAP AUDIO_AO_CHANNEL_OUT_SWAP;

struct AUDIO_RPC_AO_CHANNEL_OPT_SWAP {
	long instanceID;
	u_int channelSwapIndex;
};
typedef struct AUDIO_RPC_AO_CHANNEL_OPT_SWAP AUDIO_RPC_AO_CHANNEL_OPT_SWAP;

#endif /* !_AUDIORPCBASEDS_DATA_H_RPCGEN */
