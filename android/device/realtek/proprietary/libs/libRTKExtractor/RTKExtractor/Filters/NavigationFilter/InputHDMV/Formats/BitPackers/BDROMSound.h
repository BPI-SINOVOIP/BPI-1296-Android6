//-----------------------------------------------------------
// BDROMSound.h
// Copyright (c) 2003, Sonic Solutions.  All rights reserved.
// This code was generated by BitPackerGenerator.
//-----------------------------------------------------------

#ifndef _BDROMSound_h_
#define _BDROMSound_h_

#include "BitPacker.h"

#if defined(_WIN32)
#pragma warning(push)
#pragma warning(disable:4100)	//	unreferenced formal param
#endif
	
namespace BDROM { 
struct sound_attributes : public bitpacker::BitPacker {
  bitpacker::bits mchannel_configurations;
  bitpacker::bits msampling_frequency;
  bitpacker::bits mbits_per_sample;
  const bitpacker::reserved m_padding0;

  sound_attributes();
  sound_attributes(const sound_attributes& _a);
  explicit 
  sound_attributes(const char* _a);
  sound_attributes(rt_stream& _a);
  virtual ~sound_attributes() {}
  void layout(size_t = 0);
  void init();
  void copy(const sound_attributes& _a);
  sound_attributes& operator=(const sound_attributes& _a);
  virtual void resizeEvent(size_t _selector, size_t _newSize) {}
  void addOffset(size_t& _a) const;
  bool bitOffset(size_t& _offset, const bitpacker::BitField* _field) const;
  void pack(bitpacker::BitPtr& _a) const;
  void bind(bitpacker::ConstBitPtr& _a);
  void read(rt_stream& _is, size_t& _offset);
  void refresh() {}
  void validate(rt_stream& _os) const;
  #ifdef BITPACKER_ENABLE_PRINT
  void print(rt_stream& _os, int _indent) const;
  #endif
};

struct sound_entry : public bitpacker::BitPacker {
  sound_attributes msound_attributes;
  bitpacker::uint msound_data_start_address;
  bitpacker::uint msound_data_length;

  sound_entry();
  sound_entry(const sound_entry& _a);
  explicit 
  sound_entry(const char* _a);
  sound_entry(rt_stream& _a);
  virtual ~sound_entry() {}
  void layout(size_t = 0);
  void init();
  void copy(const sound_entry& _a);
  sound_entry& operator=(const sound_entry& _a);
  virtual void resizeEvent(size_t _selector, size_t _newSize) {}
  void addOffset(size_t& _a) const;
  bool bitOffset(size_t& _offset, const bitpacker::BitField* _field) const;
  void pack(bitpacker::BitPtr& _a) const;
  void bind(bitpacker::ConstBitPtr& _a);
  void read(rt_stream& _is, size_t& _offset);
  void refresh() {}
  void validate(rt_stream& _os) const;
  #ifdef BITPACKER_ENABLE_PRINT
  void print(rt_stream& _os, int _indent) const;
  #endif
};

struct SoundIndex : public bitpacker::BitPacker {
  bitpacker::uint mlength;
  bitpacker::uint mreserved_for_future_use;
  bitpacker::uint mnumber_of_sound_entries;
  bitpacker::array<sound_entry> msound_entry;

  SoundIndex();
  SoundIndex(const SoundIndex& _a);
  explicit 
  SoundIndex(const char* _a);
  SoundIndex(rt_stream& _a);
  virtual ~SoundIndex() {}
  void layout(size_t = 0);
  void init();
  void copy(const SoundIndex& _a);
  SoundIndex& operator=(const SoundIndex& _a);
  virtual void resizeEvent(size_t _selector, size_t _newSize);
  void addOffset(size_t& _a) const;
  bool bitOffset(size_t& _offset, const bitpacker::BitField* _field) const;
  void pack(bitpacker::BitPtr& _a) const;
  void bind(bitpacker::ConstBitPtr& _a);
  void read(rt_stream& _is, size_t& _offset);
  void refresh();
  void validate(rt_stream& _os) const;
  #ifdef BITPACKER_ENABLE_PRINT
  void print(rt_stream& _os, int _indent) const;
  #endif
};

struct sound_bdmv : public bitpacker::BitPacker {
  bitpacker::str mtype_indicator;
  bitpacker::str mversion_number;
  bitpacker::uint mSoundData_start_address;
  bitpacker::uint mExtensionData_start_address;
  const bitpacker::reserved m_padding1;
  SoundIndex mSoundIndex;

  sound_bdmv();
  sound_bdmv(const sound_bdmv& _a);
  explicit 
  sound_bdmv(const char* _a);
  sound_bdmv(rt_stream& _a);
  virtual ~sound_bdmv() {}
  void layout(size_t = 0);
  void init();
  void copy(const sound_bdmv& _a);
  sound_bdmv& operator=(const sound_bdmv& _a);
  virtual void resizeEvent(size_t _selector, size_t _newSize) {}
  void addOffset(size_t& _a) const;
  bool bitOffset(size_t& _offset, const bitpacker::BitField* _field) const;
  void pack(bitpacker::BitPtr& _a) const;
  void bind(bitpacker::ConstBitPtr& _a);
  void read(rt_stream& _is, size_t& _offset);
  void refresh() {}
  void validate(rt_stream& _os) const;
  #ifdef BITPACKER_ENABLE_PRINT
  void print(rt_stream& _os, int _indent) const;
  #endif
};

}
#ifdef BITPACKER_ENABLE_PRINT
rt_stream& operator<<(rt_stream& _os, const BDROM::sound_attributes& _a);
#endif
#ifdef BITPACKER_ENABLE_PRINT
rt_stream& operator<<(rt_stream& _os, const BDROM::sound_entry& _a);
#endif
#ifdef BITPACKER_ENABLE_PRINT
rt_stream& operator<<(rt_stream& _os, const BDROM::SoundIndex& _a);
#endif
#ifdef BITPACKER_ENABLE_PRINT
rt_stream& operator<<(rt_stream& _os, const BDROM::sound_bdmv& _a);
#endif

#if defined(_WIN32)
#pragma warning(pop)
#endif

#endif // _BDROMSound_h_

