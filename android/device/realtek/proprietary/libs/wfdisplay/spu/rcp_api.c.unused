/***************************************************************************************************
  File        : rcp_api.cpp   
  Description : Low Level API for RCP 
  Author      : Kevin Wang 
****************************************************************************************************
    Update List :
----------------------------------------------------------------------------------------------------     
    20090605    | Create Phase    
***************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
//#include <hresult.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <assert.h>
#include "rcp_api.h"

#define S_OK 0
#define S_FALSE -1
#define LOG_TAG "HDCP2_RCP_API"
#if defined(__LINARO_SDK__)
#define ALOGI printf
#else
#include <utils/Log.h>
#endif

#ifdef RCP_USE_PLI
#include <OSAL.h>
#else
static int m_fd = 0;
#endif

static volatile unsigned long  rcp_init_rdy   = 0;
static volatile unsigned long* p_reg_key      = NULL;
static volatile unsigned long* p_reg_data_in  = NULL;
static volatile unsigned long* p_reg_data_out = NULL;
static volatile unsigned long* p_reg_iv       = NULL;
static volatile unsigned long* p_reg_set      = NULL;
static volatile unsigned long* p_tp_key_info  = NULL;
static volatile unsigned long* p_tp_key_ctrl  = NULL;
#define MAX_CW_ENTRY       (128+0x40)

#define RCP_INFO(fmt, args...)          printf("[RCP] Info, " fmt, ## args)
#define RCP_WARNING(fmt, args...)       printf("[RCP] Warning, " fmt, ## args)

#define RBUS_BASE_VIRT          0xfe000000
#define REG_BASE    0x18014000 - 0x18000000 + RBUS_BASE_VIRT

#define UIO_DEV "/dev/uio250"
#define UIO_ADDR "/sys/class/uio/uio250/maps/map0/addr"
#define UIO_SIZE "/sys/class/uio/uio250/maps/map0/size"

static char uio_addr_buf[16], uio_size_buf[16];
void RCP_WRITE_SRAM_256(unsigned int id, unsigned int data[8], unsigned int cnt);

/*====================================================================== 
 * Func : RCP_Init 
 *
 * Desc : Init RCP module 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_Init()
{
    //unsigned char* reg_base = NULL;
       
    int uio_fd=-1, addr_fd=1, size_fd=1;
    unsigned long int uio_size;
    void *uio_addr, *access_address;
    void *reg_base;
    
    if (rcp_init_rdy)
        return S_OK;
        
    addr_fd = open( UIO_ADDR, O_RDONLY );
    if (addr_fd == -1) {
    	RCP_WARNING("Init UIO_ADDR failed\n");
    	goto err_open_file_failed;
    }
    size_fd = open( UIO_SIZE, O_RDONLY );
    if (size_fd == -1) {
    	RCP_WARNING("Init size_fd failed\n");
    	goto err_open_file_failed;
    }
    uio_fd = open( UIO_DEV, O_RDWR | O_SYNC);
    if (uio_fd == -1) {
    	RCP_WARNING("Init uio_fd failed\n");
    	goto err_open_file_failed;
    }

    read( addr_fd, uio_addr_buf, sizeof(uio_addr_buf) );
    read( size_fd, uio_size_buf, sizeof(uio_size_buf) );
    uio_addr = (void *)strtoul( uio_addr_buf, NULL, 0 );
    uio_size = strtol( uio_size_buf, NULL, 0 );

    //access_address = 
    reg_base = mmap64(NULL, uio_size, PROT_READ | PROT_WRITE, MAP_SHARED, uio_fd, 0);
    
    //RCP_INFO("The HW address %p length %d can be accessed over logical addrss %p\n", uio_addr, uio_size, reg_base);
    
    close(addr_fd);
    close(size_fd);
    close(uio_fd);

#ifdef RCP_USE_PLI 
    RCP_INFO("RCP_INIT with PLI\n");
    pli_init();
    reg_base = (unsigned char*) pli_getIOAddress(0xb8014000);     
    
#else
    RCP_INFO("...RCP_INIT without PLI...\n");
    
#if 0 //armv7 not support, use uio
    if (m_fd)
        return S_OK;
    
    if ((m_fd = open("/dev/mem", O_RDWR|O_SYNC))<0)        
    {
        RCP_WARNING("Init RCP failed, open /dev/mem failed\n");
        goto err_open_file_failed;        
    }
    
    reg_base = (unsigned char*) mmap(NULL, 8192, PROT_READ | PROT_WRITE, MAP_SHARED, m_fd, 0x18014000); 
    //reg_base = (unsigned char*) mmap(NULL, 8192, PROT_READ | PROT_WRITE, MAP_SHARED, m_fd, REG_BASE); 
        
    if (reg_base ==MAP_FAILED) 
    {
        RCP_WARNING("Init RCP failed, map register failed\n");
        goto err_map_reg_failed;        
    }
#endif
#endif
    //used KCPU register
    p_reg_key      = (unsigned long*) (reg_base + 0x15034);
    p_reg_data_in  = (unsigned long*) (reg_base + 0x15044);
    p_reg_data_out = (unsigned long*) (reg_base + 0x15054);
    p_reg_iv       = (unsigned long*) (reg_base + 0x15064);
    p_reg_set      = (unsigned long*) (reg_base + 0x15074);
    p_tp_key_info  = (unsigned long*) (reg_base + 0x14058);
    p_tp_key_ctrl  = (unsigned long*) (reg_base + 0x14060);
        
    RCP_INFO("Init RCP successfully\n");             
    rcp_init_rdy = 1;    
    return S_OK;             
    
//-----------------------
#ifndef RCP_USE_PLI   
err_map_reg_failed:
 
    close(m_fd);
    m_fd = 0;
#endif
err_open_file_failed: 
	if (addr_fd!=-1)
		close(addr_fd);
	if (size_fd!=-1)
    	close(size_fd);
    if (uio_fd!=-1)
    	close(uio_fd);
    return S_FALSE;
}



/*====================================================================== 
 * Func : UnInit 
 *
 * Desc : Uninit RCP module 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
void RCP_UnInit()
{
#ifndef RCP_USE_PLI
    if (m_fd)
    {
        close(m_fd);
        m_fd          = NULL;
    }
#endif    
    rcp_init_rdy   = 0;    
        p_reg_key      = NULL;
        p_reg_data_in  = NULL;
        p_reg_data_out = NULL;
        p_reg_iv       = NULL;
        p_reg_set      = NULL;        
        p_tp_key_info  = NULL;
        p_tp_key_ctrl  = NULL;               
    RCP_INFO("RCP_UNINIT\n");
}



#define B4TL(b1, b2, b3, b4)       ((b1<<24) + (b2<<16) + (b3<<8) + b4)

#define LTB4(b1, b2, b3, b4, L)    { b1 = ((L>>24)); b2 = ((L>>16)); \
                                     b3 = ((L>> 8)); b4 = ( L     ); }
                                   
#define B16TL4(L, B) do{ L[0] = B4TL(B[ 0], B[ 1], B[ 2], B[ 3]); \
                         L[1] = B4TL(B[ 4], B[ 5], B[ 6], B[ 7]); \
                         L[2] = B4TL(B[ 8], B[ 9], B[10], B[11]); \
                         L[3] = B4TL(B[12], B[13], B[14], B[15]); \
                       }while(0)         

#define L4TB16(B, L) do{ LTB4(B[ 0], B[ 1], B[ 2], B[ 3], L[0]); \
                         LTB4(B[ 4], B[ 5], B[ 6], B[ 7], L[1]); \
                         LTB4(B[ 8], B[ 9], B[10], B[11], L[2]); \
                         LTB4(B[12], B[13], B[14], B[15], L[3]); \
                       }while(0)
     

/*====================================================================== 
 * Func : RCP_AES_ECB_Cipher 
 *
 * Desc : 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_AES_ECB_Cipher(    
    unsigned char           EnDe,
    unsigned char           Key[16],     
    unsigned char*          pDataIn, 
    unsigned char*          pDataOut, 
    unsigned long           DataLen
    )
{                      
    unsigned long  out_len = 0;
    ALOGI("[%s:%d:%s]\n",__FILE__,__LINE__,__func__);

    RCP_Init();
    
    p_reg_set[0] = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;    
    p_reg_set[1] = 0;
    p_reg_set[2] = 0;
    ALOGI("[%s:%d:%s]\n",__FILE__,__LINE__,__func__);

    //RCP_INFO("RCP_AES_ECB_Cipher..................p_reg_set[0]: %x\n", p_reg_set[0] );
    //RCP_INFO("RCP_AES_ECB_Cipher..................RCP_AES_128_ECB_ENC: %x\n", RCP_AES_128_ECB_ENC );
    if (Key==NULL) 
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_OTP;
    }
    /*else if ((unsigned long)Key <= MAX_CW_ENTRY)     
    {
        //RCP_INFO("RCP_AES_ECB_Cipher..................REG_SET1_KEY_MODE_CW\n");
        p_reg_set[1] = REG_SET1_KEY_MODE_CW;             
        p_reg_set[2] = REG_SET2_KEY_ENTRY(((unsigned long)Key)-1);  // each cw takes 8 entry
    }*/
    else{
        //RCP_INFO("RCP_AES_ECB_Cipher..................REG_SET1_KEY_MODE_DDR\n");
        B16TL4(p_reg_key, Key); 
    }
    
    while(DataLen >= 16)
    {                
        B16TL4(p_reg_data_in, pDataIn);
          
        L4TB16(pDataOut, p_reg_data_out);
        pDataIn += 16;
        pDataOut+= 16;
        DataLen -= 16;
        out_len += 16;
        
        p_reg_set[0] &= ~REG_SET_FIRST_128;
    }   
        
    return out_len;    
}

/*====================================================================== 
 * Func : RCP_AES_192_ECB_Cipher 
 *
 * Desc : 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_AES_192_ECB_Cipher(    
    unsigned char           EnDe,
    unsigned char           Key[24],     
    unsigned char*          pDataIn, 
    unsigned char*          pDataOut, 
    unsigned long           DataLen
    )
{                      
    unsigned long  out_len = 0;
    
    RCP_Init();

    p_reg_set[0] = (EnDe) ? RCP_AES_192_ECB_ENC : RCP_AES_192_ECB_DEC ;    
    p_reg_set[1] = 0;
    p_reg_set[2] = 0;
    
    RCP_WRITE_SRAM_256(0x40,(unsigned int*)Key,3);

    if (Key==NULL) 
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_OTP;
    }
    else{ //AES 192 only support key in CW
        p_reg_set[1] = REG_SET1_KEY_MODE_CW;             
        p_reg_set[2] = REG_SET2_KEY_ENTRY(0x40);  // each cw takes 8 entry
    }
    
    while(DataLen >= 16)
    {          
        B16TL4(p_reg_data_in, pDataIn);

        L4TB16(pDataOut, p_reg_data_out);
        pDataIn += 16;
        pDataOut+= 16;
        DataLen -= 16;
        out_len += 16;
        
        p_reg_set[0] &= ~REG_SET_FIRST_128;
    }   
        
    return out_len;    
}

/*====================================================================== 
 * Func : RCP_AES_256_ECB_Cipher 
 *
 * Desc : 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_AES_256_ECB_Cipher(    
    unsigned char           EnDe,
    unsigned char           Key[32],     
    unsigned char*          pDataIn, 
    unsigned char*          pDataOut, 
    unsigned long           DataLen
    )
{                      
    unsigned long  out_len = 0;
    
    RCP_Init();

    p_reg_set[0] = (EnDe) ? RCP_AES_256_ECB_ENC : RCP_AES_256_ECB_DEC ;    
    p_reg_set[1] = 0;
    p_reg_set[2] = 0;
    
    RCP_WRITE_SRAM_256(0x40,(unsigned int*)Key,4);

    if (Key==NULL) 
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_OTP;
    }
    else{ //AES 256 only support key in CW
        p_reg_set[1] = REG_SET1_KEY_MODE_CW;             
        p_reg_set[2] = REG_SET2_KEY_ENTRY(0x40);  // each cw takes 8 entry
    }
    
    while(DataLen >= 16)
    {          
        B16TL4(p_reg_data_in, pDataIn);

        L4TB16(pDataOut, p_reg_data_out);
        pDataIn += 16;
        pDataOut+= 16;
        DataLen -= 16;
        out_len += 16;
        
        p_reg_set[0] &= ~REG_SET_FIRST_128;
    }   
    
    return out_len;    
}

/*====================================================================== 
 * Func : RCP_AES_CBC_Cipher 
 *
 * Desc : 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_AES_CBC_Cipher(    
    unsigned char           EnDe,
    unsigned char           Key[16],     
    unsigned char           IV[16],     
    unsigned char*          pDataIn, 
    unsigned char*          pDataOut, 
    unsigned long           DataLen
    )
{                      
    unsigned long  out_len = 0;
    
    if (IV==NULL)
    {
        RCP_WARNING("Run RCP_AES_CBC_Cipher failed, IV should not be NULL \n");
        return 0;
    }        
    
    RCP_Init();
    
    p_reg_set[0] = (EnDe) ? RCP_AES_128_CBC_ENC : RCP_AES_128_CBC_DEC ;    
    p_reg_set[1] = 0;
    p_reg_set[2] = 0;

    if (Key==NULL) 
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_OTP;
    }
    else if ((unsigned long)Key <= MAX_CW_ENTRY)     
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_CW;             
        p_reg_set[2] = REG_SET2_KEY_ENTRY(((unsigned long)Key)-1);  // each cw takes 8 entry
    }
    else
        B16TL4(p_reg_key, Key);
        
    if ((unsigned long)IV <= MAX_CW_ENTRY) 
    {
         p_reg_set[1] |= REG_SET1_IV_MODE_CW;
         p_reg_set[2] |= REG_SET2_IV_ENTRY(((unsigned long)IV)-1);  // each cw takes 8 entry
    }
    else 
    {
        p_reg_set[1] |= REG_SET1_IV_MODE_REG;
    B16TL4(p_reg_iv,  IV);    
    }
    
    if ((unsigned long)pDataIn <= MAX_CW_ENTRY) 
    {
        if (((unsigned long)pDataIn) + (DataLen>>3) > MAX_CW_ENTRY) {
            RCP_WARNING("Run RCP_AES_CBC_Cipher failed, Input from CW, but out of range\n");
            return 0;
        }         
        
        p_reg_set[1] |= REG_SET1_INPUT_MODE_CW;
    }        
    
    while(DataLen >= 16)
    {                
        if ((unsigned long)pDataIn <= MAX_CW_ENTRY) 
        {         
            p_reg_set[2] |= REG_SET2_INPUT_ENTRY(((unsigned long)pDataIn)-1);  // each cw takes 8 entry            
            p_reg_data_in[0] = 0; 
            p_reg_data_in[1] = 0; 
            p_reg_data_in[2] = 0; 
            p_reg_data_in[3] = 0; 
            pDataIn+=2;         // jump 2 cw entry...
        }
        else
        B16TL4(p_reg_data_in, pDataIn);
          
        L4TB16(pDataOut, p_reg_data_out);
        
        pDataIn += 16;
        pDataOut+= 16;
        DataLen -= 16;
        out_len += 16;
        
        p_reg_set[0] &= ~REG_SET_FIRST_128;
    }   
    
    return out_len;    
}



void xor_array(unsigned char* in1, unsigned char* in2, unsigned char* out, unsigned long len)
{
	int i=0;
    for (i=0; i<len; i++)
        out[i] = in1[i]^in2[i];
}


void aes_ctr_cnt_add(unsigned char cnt[16])
{
    unsigned char ov = 0;
    int i = 15;
    do {
        cnt[i]++;
        ov = (cnt[i]) ? 0 : 1;
    }while(i-->=0 && ov);
}



/*====================================================================== 
 * Func : RCP_AES_CTR_Cipher 
 *
 * Desc : 
 *
 * Parm : N/A
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_AES_CTR_Cipher(    
    unsigned char           Key[16],     
    unsigned char           IV[16],     
    unsigned char*          pDataIn, 
    unsigned char*          pDataOut, 
    unsigned long           DataLen
    )
{                      
    unsigned long  out_len = 0;    
    unsigned char  ecnt[16];
    unsigned char  word_align = (((unsigned long)pDataIn & 0x3) || ((unsigned long) pDataOut & 0x3)) ? 0 : 1; 
    unsigned long* pDI   = (unsigned long*) pDataIn;
    unsigned long* pDO   = (unsigned long*) pDataOut;    
    unsigned long* pEcnt = (unsigned long*) ecnt;    
    
    //RCP_INFO("RCP_AES_CTR_Cipher..................\n");
    
    if ((unsigned long)IV <= MAX_CW_ENTRY)
    {
        RCP_WARNING("Run RCP_AES_CTR_Cipher failed, IV should not comes form OTP or CW\n");
        return 0;
    }    
    
    RCP_Init();
                
    p_reg_set[0] = RCP_AES_128_ECB_ENC;        
    p_reg_set[1] = 0;
    p_reg_set[2] = 0;

    if (Key==NULL) 
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_OTP;
    }
    /*else if ((unsigned long)Key <= MAX_CW_ENTRY)     
    {
        p_reg_set[1] = REG_SET1_KEY_MODE_CW;             
        p_reg_set[2] = REG_SET2_KEY_ENTRY(((unsigned long)Key)-1);            
    }*/
    else
        B16TL4(p_reg_key, Key);
            
    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, IV);        // Encrypt IV
#if 0
        aes_ctr_cnt_add(IV);              // increase IV       
#else 
        ++(IV[15]) || ++(IV[14]) || ++(IV[13]) || ++(IV[12]) || ++(IV[11]) || ++(IV[10]) || ++(IV[9]) || ++(IV[8]) || ++(IV[7]) || ++(IV[6]) || ++(IV[5]) || ++(IV[4]) || ++(IV[3]) || ++(IV[2]) || ++(IV[1]) || ++(IV[0]);
#endif
        L4TB16(ecnt, p_reg_data_out);
           
        if (word_align)
        {
            pDO[0] = pEcnt[0] ^ pDI[0];
            pDO[1] = pEcnt[1] ^ pDI[1];
            pDO[2] = pEcnt[2] ^ pDI[2];
            pDO[3] = pEcnt[3] ^ pDI[3];                      
            pDI+=4;
            pDO+=4;
        }
        else
        {
            xor_array(pDataIn, ecnt, pDataOut, 16);    
            pDataIn += 16;
            pDataOut+= 16;     
        }       
    
        DataLen -= 16;
        out_len += 16;        
        p_reg_set[0] &= ~REG_SET_FIRST_128;
    }   
    
    return out_len;    
}



/*====================================================================== 
 * Func : RCP_WRITE_SRAM 
 *
 * Desc : Write 8 Bytes data to internal SRAM
 *
 * Parm : id   : SRAM Entry
 *        data : SRAM data
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
void RCP_WRITE_SRAM(unsigned int id, unsigned char data[8])
{
    RCP_Init();
    p_tp_key_info[0] = B4TL(data[0], data[1], data[2], data[3]);
    p_tp_key_info[1] = B4TL(data[4], data[5], data[6], data[7]);
    *p_tp_key_ctrl   = (id | 0x80);  // write 8 bytes  
    p_tp_key_info[0] = 0;
    p_tp_key_info[1] = 0;
}

/*====================================================================== 
 * Func : RCP_WRITE_SRAM_256 
 *
 * Desc : Write 8 Bytes data to internal SRAM
 *
 * Parm : id   : SRAM Entry
 *        data : SRAM data
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
void RCP_WRITE_SRAM_256(unsigned int id, unsigned int data[8], unsigned int cnt)
{
    int i=0,y=0;
    
    RCP_Init();    
    
    for(i=0;i<cnt;i++){
        //RCP_INFO("p_tp_key_info[0]..................:%x\n",data[y]);
        p_tp_key_info[0] = data[y++];
        //RCP_INFO("p_tp_key_info[1]..................:%x\n",data[y]);
        p_tp_key_info[1] = data[y++];
        *p_tp_key_ctrl   = (id+i | 0x80);  // write 8 bytes  
    }
    p_tp_key_info[0] = 0;
    p_tp_key_info[1] = 0;
}


/*====================================================================== 
 * Func : RCP_READ_SRAM 
 *
 * Desc : Read 8 Bytes data from internal SRAM
 *
 * Parm : id   : SRAM Entry
 *        data : SRAM data output
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
void RCP_READ_SRAM(unsigned int id, unsigned char data[8])
{
    //unsigned char tmp[16]; 
    
    RCP_Init();
    *p_tp_key_ctrl = id;  // read 8 bytes    
    LTB4(data[0], data[1], data[2], data[3], p_tp_key_info[0]);
    LTB4(data[4], data[5], data[6], data[7], p_tp_key_info[1]);
    p_tp_key_info[0] = 0;
    p_tp_key_info[1] = 0;
}



/*====================================================================== 
 * Func : RCP_SET_CW 
 *
 * Desc : Set Control Word to CW Area
 *
 * Parm : id   : CW Entry offset
 *        pCW  : CW data
 *        len  : size of CW data
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_SET_CW(unsigned int id, unsigned char* pCW, unsigned int len)
{    
    assert(id + ((len + 7)>>3)<MAX_CW_ENTRY);    
        
    while (len)
    {
        if (len<8) 
        {
            unsigned char sram_data[8];
            memcpy(sram_data, pCW, len);
            RCP_WRITE_SRAM(id++, sram_data);
            break;
        }
       
        RCP_WRITE_SRAM(id++, pCW);                
        pCW += 8;
        len -= 8;
    }    
    
    return 0;
}


/*====================================================================== 
 * Func : RCP_GET_CW 
 *
 * Desc : Get Control Word from CW Area
 *
 * Parm : id   : CW Entry offset
 *        pCW  : CW data output
 *        len  : size of CW data to read
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
int RCP_GET_CW(unsigned int id, unsigned char* pCW, unsigned int len)
{    
    assert(id + ((len + 7)>>3)<MAX_CW_ENTRY);  
        
    while (len)
    {
        if (len<8) 
        {
            unsigned char sram_data[8];            
            RCP_READ_SRAM(id++, sram_data);
            memcpy(pCW, sram_data, len);
            break;
        }

        RCP_READ_SRAM(id++, pCW);           
        pCW += 8;
        len -= 8;
    }    
    
    return 0;     
}



/*====================================================================== 
 * Func : RCP_CW_XOR 
 *
 * Desc : XOR two CWs
 *
 * Parm : CwIn1  : Source CW1
 *        CwIn2  : Source CW2
 *        CwOut  : Destination CW = CW1 ^ CW2
 *
 * Retn : S_OK /  S_FALSE 
 *======================================================================*/
void RCP_CW_XOR(int CwIn1, int CwIn2, int CwOut) 
{
    unsigned long tmp;
    
    // reg_iv = ECW1    
    p_reg_set[0] = RCP_AES_128_ECB_ENC;    
    p_reg_set[1] = REG_SET1_KEY_MODE_OTP | REG_SET1_INPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_INPUT_ENTRY(CwIn1);
    p_reg_data_in[3] = 0; // triger computation  
    p_reg_iv[0] = p_reg_data_out[0];        // wait complete & store ECW1 in reg iv
    p_reg_iv[1] = p_reg_data_out[1];
    p_reg_iv[2] = p_reg_data_out[2];
    p_reg_iv[3] = p_reg_data_out[3];   
    
    // CWO = CW2 
    p_reg_set[0] = RCP_AES_128_ECB_ENC;    
    p_reg_set[1] = REG_SET1_KEY_MODE_OTP | REG_SET1_INPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_INPUT_ENTRY(CwIn2); 
    p_reg_data_in[3] = 0;                   // triger : CWO=ECW2      
    tmp = p_reg_data_out[0];                // wait complete                          
    p_reg_set[0] = RCP_AES_128_ECB_DEC;    
    p_reg_set[1] = REG_SET1_KEY_MODE_OTP | REG_SET1_OUTPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_OUTPUT_ENTRY(CwOut);                 
    p_reg_data_in[0] = p_reg_data_out[0];
    p_reg_data_in[1] = p_reg_data_out[1];
    p_reg_data_in[2] = p_reg_data_out[2];
    p_reg_data_in[3] = p_reg_data_out[3];   // triger : CWO = CW2       
    tmp = p_reg_data_out[0];                // wait complete                          
        
    // CWO = AES_CBC-1(k,IV=CWO=CW1, IN=ECW1)              
    p_reg_set[0] = RCP_AES_128_CBC_DEC;        
    p_reg_set[1] = REG_SET1_KEY_MODE_OTP | REG_SET1_IV_MODE_CW | REG_SET1_OUTPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_IV_ENTRY(CwOut) | REG_SET2_OUTPUT_ENTRY(CwOut);     
    p_reg_data_in[0] = p_reg_iv[0];
    p_reg_data_in[1] = p_reg_iv[1];
    p_reg_data_in[2] = p_reg_iv[2];
    p_reg_data_in[3] = p_reg_iv[3];         // triger : CWO = D(ECW1) ^ CWO = CW1 ^ CW2    
    tmp = p_reg_data_out[0];                // wait complete
}


void RCP_DTCPIP_PKEY_AES_ECB_DEC(unsigned char* pDataIn, unsigned char KeyIn[16], int CwOut)
{
    RCP_Init();
    p_reg_set[0] = RCP_AES_128_ECB_DEC;
    p_reg_set[1] = REG_SET1_OUTPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_OUTPUT_ENTRY(CwOut);

    B16TL4(p_reg_key, KeyIn);
    B16TL4(p_reg_data_in, pDataIn);
    p_reg_set[0] &= ~REG_SET_FIRST_128;
}

int RCP_AES_CwKey_ECB_Cipher(
    unsigned char           EnDe,
    int                     CwIn,
    unsigned char*          pDataIn,
    unsigned char*          pDataOut,
    unsigned long           DataLen
    )
{
    unsigned long  out_len = 0;

    RCP_Init();
    p_reg_set[0] = (EnDe) ? RCP_AES_128_ECB_ENC : RCP_AES_128_ECB_DEC ;
    p_reg_set[1] = REG_SET1_KEY_MODE_CW;
    p_reg_set[2] = REG_SET2_KEY_ENTRY(CwIn);  // each cw takes 8 entry

    while(DataLen >= 16)
    {
        B16TL4(p_reg_data_in, pDataIn);

        L4TB16(pDataOut, p_reg_data_out);

        pDataIn += 16;
        pDataOut+= 16;
        DataLen -= 16;
        out_len += 16;

        p_reg_set[0] &= ~REG_SET_FIRST_128;
    }
    return out_len;
}


//////////////////////////// for HDCP2 support /////////////////////////////


// Bruce add comments:
// KhCw: KH_ENTRY
// KmCw: KM_ENTRY (m?)
// Rtx: Rtx
// pEkhKm: output
void RCP_HDCP2_EkhKm(int KhCw, int KmCw, unsigned char* Rtx, unsigned char* Rrx, unsigned char* pEkhKm, int useRrx)
{
    unsigned long tmp;
    memset(pEkhKm, 0, 16);
    memcpy(pEkhKm, Rtx, 8);
    // Bruce add for HDCP 2.2
    if(useRrx>0)
    	memcpy(pEkhKm+8,Rrx,8);
        
    // reg_iv = EKh(m)  
    p_reg_set[0] = RCP_AES_128_ECB_ENC;    
    p_reg_set[1] = REG_SET1_KEY_MODE_CW;
    p_reg_set[2] = REG_SET2_KEY_ENTRY(KhCw);          
    
    B16TL4(p_reg_data_in, pEkhKm);          // out = EKh(m)
    p_reg_iv[0]  = p_reg_data_out[0];
    p_reg_iv[1]  = p_reg_data_out[1];
    p_reg_iv[2]  = p_reg_data_out[2];
    p_reg_iv[3]  = p_reg_data_out[3];
    
    // out = AES_CBC(kh,IV=reg_iv=EKh(m),IN=Km) = E(Km ^ EKh(m))
    p_reg_set[0] = RCP_AES_128_CBC_ENC;
    p_reg_set[1] = REG_SET1_KEY_MODE_CW | REG_SET1_INPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_KEY_ENTRY(KhCw) | REG_SET2_INPUT_ENTRY(KmCw);
    p_reg_data_in[3] = 0;
    tmp = p_reg_data_out[0];                // wait complete       
    
    //D(E(Km^EKh(m))=Km^EKh(m)    
    p_reg_set[0] = RCP_AES_128_ECB_DEC;    
    p_reg_set[1] = REG_SET1_KEY_MODE_CW;
    p_reg_set[2] = REG_SET2_KEY_ENTRY(KhCw);      
    p_reg_data_in[0] = p_reg_data_out[0];   // IV = EKh(m)
    p_reg_data_in[1] = p_reg_data_out[1];
    p_reg_data_in[2] = p_reg_data_out[2];
    p_reg_data_in[3] = p_reg_data_out[3];   // out = D(E(Km^EKh(m))=Km^EKh(m)    
    L4TB16(pEkhKm, p_reg_data_out);         // load out to pEKhKm
}


void RCP_HDCP2_GenDKey(int KmCw, unsigned char* Rtx, unsigned char* Rrx, unsigned char* Rn, unsigned char ctr , int DKeyCW,int modeHDCP22)
{
    unsigned char tmp[16];
    unsigned char ctr_rrx_out[8];	// used in HDCP 2.2 mode
    
    memset(ctr_rrx_out,0x0,8);
    // Generate Km^Rn in DKeyCW
    // Rn is XORed with the least-significant 64-bits of km
    // LSB of Big endian data -> place it to high addr
    memset(tmp, 0, 16);        
    memcpy(&tmp[8], Rn, 8);  
    RCP_SET_CW(DKeyCW, tmp, 16);  // store Rn
    RCP_CW_XOR(KmCw, DKeyCW, DKeyCW); 		// Km^Rn, the result is stored in KmCW
    
    // Calculate IV (stored in tmp)
	// none HDCP 2.2 tmp = rtx || ctr
	// HDCP 2.2      tmp = rtx || (rrx XOR ctr)
    memset(tmp, 0, 16);      	// clear buffer
    memcpy(tmp, Rtx, 8);  		// set Rtx, high byte -> low addr
        
    if(modeHDCP22==0)
    tmp[15] = ctr;
    else
	{
		unsigned char ctr_array[8];
		memset(ctr_array,0x0,8);	// clear memory to 0
		ctr_array[7]=ctr;		// place data in big endian order
		xor_array(Rrx,ctr_array,ctr_rrx_out,8);
		memcpy(&tmp[8],ctr_rrx_out,8);
	}
    // Generate Kd    
    // follow original implementation
    p_reg_set[0] = RCP_AES_128_ECB_ENC;    
    p_reg_set[1] = REG_SET1_KEY_MODE_CW | REG_SET1_OUTPUT_MODE_CW;
    p_reg_set[2] = REG_SET2_KEY_ENTRY(DKeyCW) | REG_SET2_OUTPUT_ENTRY(DKeyCW);           
    B16TL4(p_reg_data_in, tmp);     // input data    
    L4TB16(tmp, p_reg_data_out);
}



void RCP_HDCP2_GenKd(int KmCw, unsigned char* Rtx, unsigned char* Rrx, unsigned char* Rn, int KdCW, int modeHDCP22)
{
	RCP_HDCP2_GenDKey(KmCw, Rtx, Rrx, Rn, 0, KdCW, modeHDCP22);
	RCP_HDCP2_GenDKey(KmCw, Rtx, Rrx, Rn, 1, KdCW + 2, modeHDCP22);
}


void RCP_HDCP2_GenKs(int dKey2CW, unsigned char* EdKeyKs, unsigned char* rRx, int KsCW) 
{
    // Ks = EdKey2 ^ dKey2CW ^ rrx 
    unsigned char tmp[16];
    memcpy(tmp, EdKeyKs, 16);
    xor_array(&tmp[8], rRx, &tmp[8], 8);
    RCP_SET_CW(KsCW, tmp, 16); 
    RCP_CW_XOR(dKey2CW, KsCW, KsCW);  
}


void RCP_HDCP2_GenKsXorLc128(int Lc128Cw, int KsCW, int KsXorLc128CW) 
{   
    RCP_CW_XOR(Lc128Cw, KsCW, KsXorLc128CW);
}
