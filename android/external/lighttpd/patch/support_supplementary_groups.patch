diff --git a/src/base.h b/src/base.h
index 66710f1..8d0b07e 100644
--- a/src/base.h
+++ b/src/base.h
@@ -496,6 +496,7 @@ typedef struct {
 	buffer *changeroot;
 	buffer *username;
 	buffer *groupname;
+	array *s_groupnames;
 
 	buffer *pid_file;
 
diff --git a/src/configfile.c b/src/configfile.c
index 7408ed0..5a4e108 100644
--- a/src/configfile.c
+++ b/src/configfile.c
@@ -108,6 +108,7 @@ static int config_insert(server *srv) {
 		{ "ssl.disable-client-renegotiation", NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER },/* 65 */
 		{ "ssl.honor-cipher-order",      NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER },     /* 66 */
 		{ "ssl.empty-fragments",         NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_SERVER },     /* 67 */
+		{ "server.s-groupnames",         NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_SERVER },       /* 68 */
 
 		{ "server.host",                 "use server.bind instead", T_CONFIG_DEPRECATED, T_CONFIG_SCOPE_UNSET },
 		{ "server.docroot",              "use server.document-root instead", T_CONFIG_DEPRECATED, T_CONFIG_SCOPE_UNSET },
@@ -152,6 +153,7 @@ static int config_insert(server *srv) {
 	cv[12].destination = &(srv->srvconf.max_request_size);
 	cv[52].destination = &(srv->srvconf.reject_expect_100_with_417);
 	cv[55].destination = srv->srvconf.breakagelog_file;
+	cv[68].destination = srv->srvconf.s_groupnames;
 
 	srv->config_storage = calloc(1, srv->config_context->used * sizeof(specific_config *));
 
diff --git a/src/server.c b/src/server.c
index a779928..ba4b50f 100644
--- a/src/server.c
+++ b/src/server.c
@@ -204,6 +204,7 @@ static server *server_init(void) {
 	CLEAN(config_context);
 	CLEAN(config_touched);
 	CLEAN(status);
+	CLEAN(srvconf.s_groupnames);
 #undef CLEAN
 
 	for (i = 0; i < FILE_CACHE_MAX; i++) {
@@ -328,6 +329,7 @@ static void server_free(server *srv) {
 	CLEAN(config_touched);
 	CLEAN(status);
 	CLEAN(srvconf.upload_tempdirs);
+	CLEAN(srvconf.s_groupnames);
 #undef CLEAN
 
 	joblist_free(srv, srv->joblist);
@@ -818,10 +820,38 @@ int main (int argc, char **argv) {
 		 * */
 		if (NULL != grp) {
 			setgid(grp->gr_gid);
-			setgroups(0, NULL);
-			if (srv->srvconf.username->used) {
-				initgroups(srv->srvconf.username->ptr, grp->gr_gid);
-			}
+            /*
+             * For support supplementary groups set in Android.
+             * By hamer @ 20131122
+             */
+            gid_t *s_gids = NULL;
+            struct group *s_grp;
+            int num_of_s_gids = srv->srvconf.s_groupnames->used;
+            if (num_of_s_gids) {
+                s_gids = calloc(num_of_s_gids, sizeof(*s_gids));
+                getgrnam(srv->srvconf.groupname->ptr);
+                for(int i =0; i<srv->srvconf.s_groupnames->used; i++) {
+                    data_string *ds = (data_string*)srv->srvconf.s_groupnames->data[i];
+                    if (NULL == (s_grp = getgrnam(ds->value->ptr))) {
+                        log_error_write(srv, __FILE__, __LINE__, "sb",
+                                "can't find s_groupname", ds->value->ptr);
+                        free(s_gids);
+                        return -1;
+                    }
+                    s_gids[i] = s_grp->gr_gid;
+                }
+                if (setgroups(num_of_s_gids, s_gids) != 0) {
+                    log_error_write(srv,  __FILE__, __LINE__, "ss", "setgroups failed: ", strerror(errno));
+                    return -1;
+                }
+                free(s_gids);
+            }
+            else {
+			    setgroups(0, NULL);
+			    if (srv->srvconf.username->used) {
+				    initgroups(srv->srvconf.username->ptr, grp->gr_gid);
+			    }
+            }
 		}
 #endif
 #ifdef HAVE_CHROOT
