--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/hal/rtl8812a/pci/pci_ops_linux.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/hal/rtl8812a/pci/pci_ops_linux.c
@@ -508,7 +508,11 @@ s32	rtl8812ae_interrupt(PADAPTER Adapter
 		pHalData->IntrMask[1] &= (~IMR_RXFOVW_8812);		
 		rtw_write32(Adapter, REG_HIMR0_8812, pHalData->IntrMask[0]);
 		rtw_write32(Adapter, REG_HIMR1_8812, pHalData->IntrMask[1]);
+#ifdef CONFIG_NAPI
+		napi_schedule(&Adapter->napi);
+#else
 		tasklet_hi_schedule(&Adapter->recvpriv.recv_tasklet);
+#endif
 	}
 
 	//<3> Tx related
@@ -775,6 +779,121 @@ done:
 
 }
 
+#ifdef CONFIG_NAPI
+int pci_napi_recv(_adapter *padapter, int budget)
+{
+	_irqL   irqL;
+	_pkt                    *pskb;
+	struct recv_priv        *precvpriv = &padapter->recvpriv;
+	HAL_DATA_TYPE		*pHalData = GET_HAL_DATA(padapter);
+	struct dvobj_priv       *pdvobjpriv = adapter_to_dvobj(padapter);
+	int 			work_done=0;
+
+	while ( (work_done < budget) &&
+		(!skb_queue_empty(&precvpriv->rx_napi_skb_queue))) {
+
+		pskb = skb_dequeue(&precvpriv->rx_napi_skb_queue);
+
+		if(!pskb)
+			break;
+
+		if (RTW_CANNOT_RUN(padapter)) {
+			DBG_8192C("pci_napi_recv => bDriverStopped or bSurpriseRemoved \n");
+			rtw_skb_free(pskb);
+			goto exit;
+			break;
+		}
+
+#ifdef CONFIG_GRO
+		if(napi_gro_receive(&padapter->napi, pskb) == NET_RX_SUCCESS) {
+#else
+		if(netif_receive_skb(pskb)== NET_RX_SUCCESS) {
+#endif
+			work_done++;
+			DBG_COUNTER(padapter->rx_logs.os_netif_ok);
+		}
+		else
+			DBG_COUNTER(padapter->rx_logs.os_netif_err);
+	}
+
+	rtl8812ae_rx_mpdu(padapter);
+
+	//indicate packets in the rx_napi_skb_queue of current recv_napi_poll
+	while ( (work_done < budget) &&
+		(!skb_queue_empty(&precvpriv->rx_napi_skb_queue))) {
+
+		pskb = skb_dequeue(&precvpriv->rx_napi_skb_queue);
+
+		if(!pskb)
+			break;
+
+		if (RTW_CANNOT_RUN(padapter)) {
+			DBG_8192C("pci_napi_recv => bDriverStopped or bSurpriseRemoved \n");
+			rtw_skb_free(pskb);
+			goto exit;
+			break;
+		}
+
+#ifdef CONFIG_GRO
+		if(napi_gro_receive(&padapter->napi, pskb) == NET_RX_SUCCESS) {
+#else
+		if(netif_receive_skb(pskb)== NET_RX_SUCCESS) {
+#endif
+			work_done++;
+			DBG_COUNTER(padapter->rx_logs.os_netif_ok);
+		}
+		else
+			DBG_COUNTER(padapter->rx_logs.os_netif_err);
+        }
+
+exit:
+
+        return work_done;
+
+}
+
+int recv_napi_poll(struct napi_struct *napi, int budget)
+{
+	_irqL   irqL;
+	_adapter *padapter = container_of(napi, _adapter, napi);
+	int work_done = 0;
+	_pkt                    *pskb;
+	struct recv_priv        *precvpriv = &padapter->recvpriv;
+	HAL_DATA_TYPE		*pHalData = GET_HAL_DATA(padapter);
+	struct dvobj_priv       *pdvobjpriv = adapter_to_dvobj(padapter);
+	u8 bschedule = _FALSE;
+
+	//DBG_8192C("=>recv_napi_poll\n");
+
+	work_done = pci_napi_recv(padapter, budget);
+	//if(work_done > 0)
+	//DBG_8192C("recv_napi_poll: work_done=%d\n", work_done);
+
+	if (work_done < budget) {
+		int	rx_queue_idx = RX_MPDU_QUEUE;
+		u8	*rx_desc = (u8 *)&precvpriv->rx_ring[rx_queue_idx].desc[precvpriv->rx_ring[rx_queue_idx].idx];
+	//if (work_done <= 1) { /* burst ends - only one packet processed */
+		napi_complete(napi);
+		if(!skb_queue_empty(&precvpriv->rx_napi_skb_queue) ||
+			!GET_RX_STATUS_DESC_OWN_8812(rx_desc) ) {
+
+			napi_schedule(napi);
+			bschedule = _TRUE;
+		}
+	}
+
+	if(!bschedule) {
+		_enter_critical(&pdvobjpriv->irq_th_lock, &irqL);
+		pHalData->IntrMask[0] |= (IMR_ROK_8812|IMR_RDU_8812);
+		pHalData->IntrMask[1] |= IMR_RXFOVW_8812;
+		rtw_write32(padapter, REG_HIMR0_8812, pHalData->IntrMask[0]);
+		rtw_write32(padapter, REG_HIMR1_8812, pHalData->IntrMask[1]);
+		_exit_critical(&pdvobjpriv->irq_th_lock, &irqL);
+	}
+
+	return work_done;
+}
+#else
 void rtl8812ae_recv_tasklet(void *priv)
 {
 	_irqL	irqL;
@@ -790,6 +909,7 @@ void rtl8812ae_recv_tasklet(void *priv)
 	rtw_write32(padapter, REG_HIMR1_8812, pHalData->IntrMask[1]);
 	_exit_critical(&pdvobjpriv->irq_th_lock, &irqL);
 }
+#endif
 
 #ifdef RTK_129X_PLATFORM
 #define IO_2K_MASK (BIT11|BIT12|BIT13)
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/hal/rtl8812a/pci/rtl8812ae_recv.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/hal/rtl8812a/pci/rtl8812ae_recv.c
@@ -31,15 +31,21 @@ s32 rtl8812ae_init_recv_priv(_adapter *
 _func_enter_;
 
 #ifdef PLATFORM_LINUX
+#ifndef CONFIG_NAPI
 	tasklet_init(&precvpriv->recv_tasklet,
 	     (void(*)(unsigned long))rtl8812ae_recv_tasklet,
 	     (unsigned long)padapter);
+#endif
 
 	tasklet_init(&precvpriv->irq_prepare_beacon_tasklet,
 	     (void(*)(unsigned long))rtl8812ae_prepare_bcn_tasklet,
 	     (unsigned long)padapter);
 #endif
 
+#ifdef CONFIG_NAPI
+       skb_queue_head_init(&precvpriv->rx_napi_skb_queue);
+#endif
+
 _func_exit_;
 
 	return ret;
@@ -47,10 +53,18 @@ _func_exit_;
 
 void rtl8812ae_free_recv_priv(_adapter * padapter)
 {
-	//struct recv_priv	*precvpriv = &padapter->recvpriv;
+#ifdef CONFIG_NAPI
+	struct recv_priv	*precvpriv = &padapter->recvpriv;
+#endif
 
 _func_enter_;
 
+#ifdef CONFIG_NAPI
+	if (skb_queue_len(&precvpriv->rx_napi_skb_queue)) {
+		DBG_8192C(KERN_WARNING "rx_napi_skb_queue not empty\n");
+	}
+#endif
+
 _func_exit_;
 }
 
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/autoconf.h
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/autoconf.h
@@ -35,6 +35,7 @@
 
 #define PLATFORM_LINUX	1
 
+#define CONFIG_NAPI
 
 //#define CONFIG_IOCTL_CFG80211 1
 
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/drv_types.h
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/drv_types.h
@@ -903,6 +903,13 @@ typedef enum _DRIVER_STATE{
 	DRIVER_REPLACE_DONGLE = 2,
 }DRIVER_STATE;
 
+#ifdef CONFIG_NAPI
+enum _NAPI_STATE{
+	NAPI_DISABLE = 0,
+	NAPI_ENABLE = 1,
+};
+#endif
+
 #ifdef CONFIG_INTEL_PROXIM
 struct proxim {
 	bool proxim_support;
@@ -953,6 +960,12 @@ struct _ADAPTER{
 
 	struct	led_priv	ledpriv;
 
+#ifdef CONFIG_NAPI
+	struct  napi_struct napi;
+	u8      napi_state;
+	u8      napi_add;
+#endif
+
 #ifdef CONFIG_MP_INCLUDED
        struct	mp_priv	mppriv;
 #endif
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/pci_ops.h
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/pci_ops.h
@@ -38,7 +38,11 @@ u32	rtl8812ae_free_desc_ring(_adapter *p
 void	rtl8812ae_reset_desc_ring(_adapter *padapter);
 int	rtl8812ae_interrupt(PADAPTER Adapter);
 void	rtl8812ae_xmit_tasklet(void *priv);
+#ifdef CONFIG_NAPI
+int	recv_napi_poll(struct napi_struct *napi, int budget);
+#else
 void	rtl8812ae_recv_tasklet(void *priv);
+#endif
 void	rtl8812ae_prepare_bcn_tasklet(void *priv);
 void	rtl8812ae_set_intf_ops(struct _io_ops	*pops);
 #endif
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/rtw_recv.h
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/include/rtw_recv.h
@@ -51,6 +51,9 @@
 		#define NR_PREALLOC_RECV_SKB 8
 	#endif /* CONFIG_PREALLOC_RX_SKB_BUFFER */
 
+#ifdef CONFIG_NAPI
+	#define RTL_NAPI_WEIGHT (64)
+#endif
 #endif
 
 #define NR_RECVFRAME 256
@@ -420,6 +423,9 @@ struct recv_priv
 #endif //PLATFORM_FREEBSD
 	struct sk_buff_head free_recv_skb_queue;
 	struct sk_buff_head rx_skb_queue;
+#ifdef CONFIG_NAPI
+	struct sk_buff_head rx_napi_skb_queue;
+#endif
 #ifdef CONFIG_RX_INDICATE_QUEUE
 	struct task rx_indicate_tasklet;
 	struct ifqueue rx_indicate_queue;
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/os_dep/linux/os_intfs.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/os_dep/linux/os_intfs.c
@@ -1393,7 +1393,13 @@ u8 rtw_init_default_value(_adapter *pada
 	padapter->drv_rx_cnt_ok = 0;
 	padapter->drv_rx_cnt_crcerror = 0;
 	padapter->drv_rx_cnt_drop = 0;
-#endif	
+#endif
+
+#ifdef CONFIG_NAPI
+	padapter->napi_add = _FALSE;
+	padapter->napi_state=NAPI_DISABLE;
+	DBG_871X("%s(): napi_add=%d\n", __FUNCTION__, padapter->napi_add);
+#endif
 	return ret;
 }
 
@@ -2132,6 +2138,13 @@ int _netdev_if2_open(struct net_device *
 		//if (init_mlme_ext_priv(padapter) == _FAIL)
 		//	goto netdev_if2_open_error;
 
+#ifdef CONFIG_NAPI
+		if(padapter->napi_state== NAPI_DISABLE) {
+			DBG_871X("%s(): napi_enable\n",__FUNCTION__);
+			napi_enable(&padapter->napi);
+			padapter->napi_state = NAPI_ENABLE;
+		}
+#endif
 
 		if (rtw_start_drv_threads(padapter) == _FAIL)
 		{
@@ -2167,6 +2180,14 @@ netdev_if2_open_error:
 
 	padapter->bup = _FALSE;
 
+#ifdef CONFIG_NAPI
+	if(padapter->napi_state== NAPI_ENABLE) {
+		DBG_871X("%s(): napi_disable\n", __FUNCTION__);
+		napi_disable(&padapter->napi);
+		padapter->napi_state = NAPI_DISABLE;
+	}
+#endif
+
 	netif_carrier_off(pnetdev);
 	rtw_netif_stop_queue(pnetdev);
 
@@ -2371,11 +2392,27 @@ void rtw_drv_if2_stop(_adapter *if2)
 			padapter->intf_stop(padapter);
 		}
 
+#ifdef CONFIG_NAPI
+		if(padapter->napi_state==NAPI_ENABLE) {
+			napi_disable(&padapter->napi);
+			padapter->napi_state=NAPI_DISABLE;
+			DBG_871X("%s(): napi_disable\n", __FUNCTION__);
+		}
+#endif
+
 		rtw_stop_drv_threads(padapter);
 
 		padapter->bup = _FALSE;
 	}
 
+#ifdef CONFIG_NAPI
+	if(padapter->napi_add == _TRUE) {
+		DBG_871X("if2 napi_del\n");
+		netif_napi_del(&padapter->napi);
+		padapter->napi_add = _FALSE;
+	}
+#endif
+
 	/* cancel timer after thread stop */
 	rtw_cancel_all_timer(padapter);
 }
@@ -2471,6 +2508,43 @@ void rtw_os_ndevs_unregister(struct dvob
 #endif
 }
 
+#ifdef CONFIG_NAPI
+/**
+ * rtw_napi_add - Add or delete napi for each netdev()
+ * @dvobj: the dvobj on which this function applies
+ * add == 1 => add napi
+ * add == 0 => delete napi
+ */
+void rtw_napi_add(struct dvobj_priv *dvobj, u8 add)
+{
+	int i=0;
+	if(add)
+		DBG_871X("netif_napi_add weight=%d\n", RTL_NAPI_WEIGHT);
+	else
+		DBG_871X("net_napi_del\n");
+
+	for (i = 0; i < dvobj->iface_nums; i++) {
+		if (i >= IFACE_ID_MAX) {
+			DBG_871X_LEVEL(_drv_err_, "%s %d >= IFACE_ID_MAX\n", __func__, i);
+			rtw_warn_on(1);
+			continue;
+		}
+
+		if(add) {
+			if(dvobj->padapters[i]->napi_add == _FALSE) {
+				netif_napi_add(dvobj->padapters[i]->pnetdev, &dvobj->padapters[i]->napi, recv_napi_poll, RTL_NAPI_WEIGHT);
+				dvobj->padapters[i]->napi_add = _TRUE;
+			}
+		} else {
+			if(dvobj->padapters[i]->napi_add == _TRUE) {
+				netif_napi_del(&dvobj->padapters[i]->napi);
+				dvobj->padapters[i]->napi_add = _FALSE;
+			}
+		}
+	}
+}
+#endif
+
 /**
  * rtw_os_ndevs_init - Allocate and register OS layer net devices and relating structures for @dvobj
  * @dvobj: the dvobj on which this function applies
@@ -2485,12 +2559,19 @@ int rtw_os_ndevs_init(struct dvobj_priv
 	if (rtw_os_ndevs_alloc(dvobj) != _SUCCESS)
 		goto exit;
 
+#ifdef CONFIG_NAPI
+	rtw_napi_add(dvobj, 1);
+#endif
+
 	if (rtw_os_ndevs_register(dvobj) != _SUCCESS)
 		goto os_ndevs_free;
 
 	ret = _SUCCESS;
 
 os_ndevs_free:
+#ifdef CONFIG_NAPI
+	rtw_napi_add(dvobj, 0);
+#endif
 	if (ret != _SUCCESS)
 		rtw_os_ndevs_free(dvobj);
 exit:
@@ -2590,6 +2671,15 @@ int _netdev_open(struct net_device *pnet
 		rtw_clr_surprise_removed(padapter);
 		rtw_clr_drv_stopped(padapter);
 
+#ifdef CONFIG_NAPI
+		if(padapter->napi_state==NAPI_DISABLE)
+		{
+			DBG_871X("%s(): napi_enable\n", __FUNCTION__);
+			napi_enable(&padapter->napi);
+			padapter->napi_state = NAPI_ENABLE;
+		}
+#endif
+
 		status = rtw_hal_init(padapter);
 		if (status ==_FAIL)
 		{
@@ -2676,6 +2766,15 @@ netdev_open_error:
 
 	padapter->bup = _FALSE;
 
+#ifdef CONFIG_NAPI
+	if(padapter->napi_state==NAPI_ENABLE)
+	{
+		DBG_871X("%s: napi_disable\n", __FUNCTION__);
+		napi_disable(&padapter->napi);
+		padapter->napi_state = NAPI_DISABLE;
+	}
+#endif
+
 	netif_carrier_off(pnetdev);
 	rtw_netif_stop_queue(pnetdev);
 
@@ -3292,6 +3391,14 @@ void rtw_dev_unload(PADAPTER padapter)
 
 		if (padapter->intf_stop)
 			padapter->intf_stop(padapter);
+
+#ifdef CONFIG_NAPI
+		if(padapter->napi_state==NAPI_ENABLE) {
+			napi_disable(&padapter->napi);
+			padapter->napi_state=NAPI_DISABLE;
+			DBG_871X("%s(): napi_disable\n", __FUNCTION__);
+		}
+#endif
 		
 		RT_TRACE(_module_hci_intfs_c_, _drv_notice_, ("@ rtw_dev_unload: stop intf complete!\n"));
 
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/os_dep/linux/pci_intf.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/os_dep/linux/pci_intf.c
@@ -1304,7 +1304,9 @@ static void pci_intf_stop(_adapter *pada
 	{
 		//device still exists, so driver can do i/o operation
 		rtw_hal_disable_interrupt(padapter);
+#ifndef CONFIG_NAPI
 		tasklet_kill(&(padapter->recvpriv.recv_tasklet));
+#endif
 		tasklet_kill(&(padapter->recvpriv.irq_prepare_beacon_tasklet));
 		tasklet_kill(&(padapter->xmitpriv.xmit_tasklet));
 		
@@ -1313,7 +1315,9 @@ static void pci_intf_stop(_adapter *pada
 			don't disable interrupt of buddy_adapter because it is same as primary.
 		*/
 		if (padapter->pbuddy_adapter){
+#ifndef CONFIG_NAPI
 			tasklet_kill(&(padapter->pbuddy_adapter->recvpriv.recv_tasklet));
+#endif
 			tasklet_kill(&(padapter->pbuddy_adapter->recvpriv.irq_prepare_beacon_tasklet));
 			tasklet_kill(&(padapter->pbuddy_adapter->xmitpriv.xmit_tasklet));
 		}
@@ -1595,6 +1599,14 @@ static void rtw_pci_if1_deinit(_adapter
 #endif //CONFIG_WOWLAN
 	rtw_dev_unload(if1);
 
+#ifdef CONFIG_NAPI
+	if(if1->napi_add == _TRUE) {
+		DBG_871X("if1 napi_del\n");
+		netif_napi_del(&if1->napi);
+		if1->napi_add == _FALSE;
+	}
+#endif
+
 	DBG_871X("%s, hw_init_completed=%s\n", __func__, rtw_is_hw_init_completed(if1)?"_TRUE":"_FALSE");
 
 	rtw_hal_inirp_deinit(if1);
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/os_dep/linux/recv_linux.c
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8812ae/os_dep/linux/recv_linux.c
@@ -423,11 +423,16 @@ void rtw_os_recv_indicate_pkt(_adapter *
 		pkt->ip_summed = CHECKSUM_NONE;
 #endif //CONFIG_TCP_CSUM_OFFLOAD_RX
 
+#ifdef CONFIG_NAPI
+		skb_queue_tail(&precvpriv->rx_napi_skb_queue, pkt);
+		napi_schedule(&padapter->napi);
+#else
 		ret = rtw_netif_rx(padapter->pnetdev, pkt);
 		if (ret == NET_RX_SUCCESS)
 			DBG_COUNTER(padapter->rx_logs.os_netif_ok);
 		else
 			DBG_COUNTER(padapter->rx_logs.os_netif_err);
+#endif
 	}
 }
 
--- a/drivers/net/wireless/realtek/rtkwifiu/rtl8723du/Makefile
+++ b/drivers/net/wireless/realtek/rtkwifiu/rtl8723du/Makefile
@@ -69,8 +69,8 @@ CONFIG_TDLS = n
 CONFIG_WIFI_MONITOR = n
 CONFIG_MCC_MODE = n
 CONFIG_APPEND_VENDOR_IE_ENABLE = n
-CONFIG_RTW_NAPI = n
-CONFIG_RTW_GRO = n
+CONFIG_RTW_NAPI = y
+CONFIG_RTW_GRO = y
 ########################## Debug ###########################
 CONFIG_RTW_DEBUG = y
 # default log level is _DRV_INFO_ = 4,
