--- a/device.c
+++ b/device.c
@@ -50,7 +50,9 @@ static const struct blobmsg_policy dev_a
 	[DEV_ATTR_NEIGHREACHABLETIME] = { .name = "neighreachabletime", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_NEIGHGCSTALETIME] = { .name = "neighgcstaletime", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_RPS] = { .name = "rps", .type = BLOBMSG_TYPE_BOOL },
+	[DEV_ATTR_RPS_MASK] = { .name = "rps_mask", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_XPS] = { .name = "xps", .type = BLOBMSG_TYPE_BOOL },
+	[DEV_ATTR_XPS_MASK] = { .name = "xps_mask", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_DADTRANSMITS] = { .name = "dadtransmits", .type = BLOBMSG_TYPE_INT32 },
 	[DEV_ATTR_MULTICAST_TO_UNICAST] = { .name = "multicast_to_unicast", .type = BLOBMSG_TYPE_BOOL },
 	[DEV_ATTR_MULTICAST_ROUTER] = { .name = "multicast_router", .type = BLOBMSG_TYPE_INT32 },
@@ -318,6 +320,12 @@ device_init_settings(struct device *dev,
 	else
 		s->rps = default_ps;
 
+	if ((cur = tb[DEV_ATTR_RPS_MASK])) {
+		s->rps_mask = blobmsg_get_u32(cur);
+	}
+	else
+		s->rps_mask = 0;
+
 	if ((cur = tb[DEV_ATTR_XPS])) {
 		s->xps = blobmsg_get_bool(cur);
 		s->flags |= DEV_OPT_XPS;
@@ -325,6 +333,12 @@ device_init_settings(struct device *dev,
 	else
 		s->xps = default_ps;
 
+	if ((cur = tb[DEV_ATTR_XPS_MASK])) {
+		s->xps_mask = blobmsg_get_u32(cur);
+	}
+	else
+		s->xps_mask = 0;
+
 	if ((cur = tb[DEV_ATTR_DADTRANSMITS])) {
 		s->dadtransmits = blobmsg_get_u32(cur);
 		s->flags |= DEV_OPT_DADTRANSMITS;
@@ -497,7 +511,9 @@ int device_init(struct device *dev, stru
 	system_if_clear_state(dev);
 	device_check_state(dev);
 	dev->settings.rps = default_ps;
+	dev->settings.rps_mask = 0;
 	dev->settings.xps = default_ps;
+	dev->settings.xps_mask = 0;
 
 	return 0;
 }
@@ -911,11 +927,13 @@ device_set_default_ps(bool state)
 
 		if (!(s->flags & DEV_OPT_RPS)) {
 			s->rps = default_ps;
+			s->rps_mask = 0;
 			apply_mask |= DEV_OPT_RPS;
 		}
 
 		if (!(s->flags & DEV_OPT_XPS)) {
 			s->xps = default_ps;
+			s->xps_mask = 0;
 			apply_mask |= DEV_OPT_XPS;
 		}
 
--- a/device.h
+++ b/device.h
@@ -41,7 +41,9 @@ enum {
 	DEV_ATTR_MLDVERSION,
 	DEV_ATTR_NEIGHREACHABLETIME,
 	DEV_ATTR_RPS,
+	DEV_ATTR_RPS_MASK,
 	DEV_ATTR_XPS,
+	DEV_ATTR_XPS_MASK,
 	DEV_ATTR_DADTRANSMITS,
 	DEV_ATTR_MULTICAST_TO_UNICAST,
 	DEV_ATTR_MULTICAST_ROUTER,
@@ -159,7 +161,9 @@ struct device_settings {
 	unsigned int neigh4gcstaletime;
 	unsigned int neigh6gcstaletime;
 	bool rps;
+	unsigned int rps_mask;
 	bool xps;
+	unsigned int xps_mask;
 	unsigned int dadtransmits;
 	bool multicast_to_unicast;
 	unsigned int multicast_router;
--- a/system-linux.c
+++ b/system-linux.c
@@ -1312,14 +1312,17 @@ system_if_apply_rps_xps(struct device *d
 {
 	long n_cpus = sysconf(_SC_NPROCESSORS_ONLN);
 	int val;
+	int max;
 
 	if (n_cpus < 2)
 		return;
 
-	val = (1 << n_cpus) - 1;
+	max = (1 << n_cpus) - 1;
+	val = (s->rps_mask > 0 && s->rps_mask < max) ? s->rps_mask : max;
 	snprintf(dev_buf, sizeof(dev_buf), "/sys/class/net/%s/queues/*/rps_cpus", dev->ifname);
 	system_if_set_rps_xps_val(dev_buf, s->rps ? val : 0);
 
+	val = (s->xps_mask > 0 && s->xps_mask < max) ? s->xps_mask : max;
 	snprintf(dev_buf, sizeof(dev_buf), "/sys/class/net/%s/queues/*/xps_cpus", dev->ifname);
 	system_if_set_rps_xps_val(dev_buf, s->xps ? val : 0);
 }
