--- a/include/iwinfo.h
+++ b/include/iwinfo.h
@@ -192,6 +192,9 @@ struct iwinfo_ops {
 	int (*txpwrlist)(const char *, char *, int *);
 	int (*scanlist)(const char *, char *, int *);
 	int (*freqlist)(const char *, char *, int *);
+#ifdef USE_NL80211
+	int (*no_dfs_freqlist)(const char *, char *, int *);
+#endif
 	int (*countrylist)(const char *, char *, int *);
 	int (*lookup_phy)(const char *, char *);
 	void (*close)(void);
--- a/iwinfo_cli.c
+++ b/iwinfo_cli.c
@@ -659,6 +659,36 @@ static void print_freqlist(const struct
 }
 
 
+#ifdef USE_NL80211
+static void print_no_dfs_freqlist(const struct iwinfo_ops *iw, const char *ifname)
+{
+	int i, len, ch;
+	char buf[IWINFO_BUFSIZE];
+	struct iwinfo_freqlist_entry *e;
+
+	if (iw->no_dfs_freqlist(ifname, buf, &len) || len <= 0)
+	{
+		printf("No frequency information available\n");
+		return;
+	}
+
+	if (iw->channel(ifname, &ch))
+		ch = -1;
+
+	for (i = 0; i < len; i += sizeof(struct iwinfo_freqlist_entry))
+	{
+		e = (struct iwinfo_freqlist_entry *) &buf[i];
+
+		printf("%s %s (Channel %s)%s\n",
+			(ch == e->channel) ? "*" : " ",
+			format_frequency(e->mhz),
+			format_channel(e->channel),
+			e->restricted ? " [restricted]" : "");
+	}
+}
+#endif
+
+
 static void print_assoclist(const struct iwinfo_ops *iw, const char *ifname)
 {
 	int i, len;
@@ -796,6 +826,9 @@ int main(int argc, char **argv)
 			"	iwinfo <device> scan\n"
 			"	iwinfo <device> txpowerlist\n"
 			"	iwinfo <device> freqlist\n"
+#ifdef USE_NL80211
+			"	iwinfo <device> no_dfs_freqlist\n"
+#endif
 			"	iwinfo <device> assoclist\n"
 			"	iwinfo <device> countrylist\n"
 			"	iwinfo <device> htmodelist\n"
@@ -882,7 +915,11 @@ int main(int argc, char **argv)
 				case 'f':
 					print_freqlist(iw, argv[1]);
 					break;
-
+#ifdef USE_NL80211
+				case 'n':
+					print_no_dfs_freqlist(iw, argv[1]);
+					break;
+#endif
 				case 'a':
 					print_assoclist(iw, argv[1]);
 					break;
--- a/iwinfo_lua.c
+++ b/iwinfo_lua.c
@@ -461,6 +461,44 @@ static int iwinfo_L_freqlist(lua_State *
 	return 1;
 }
 
+/* Wrapper for no dfs frequency list */
+static int iwinfo_L_no_dfs_freqlist(lua_State *L, int (*func)(const char *, char *, int *))
+{
+	int i, x, len;
+	char rv[IWINFO_BUFSIZE];
+	const char *ifname = luaL_checkstring(L, 1);
+	struct iwinfo_freqlist_entry *e;
+
+	lua_newtable(L);
+	memset(rv, 0, sizeof(rv));
+
+	if (!(*func)(ifname, rv, &len))
+	{
+		for (i = 0, x = 1; i < len; i += sizeof(struct iwinfo_freqlist_entry), x++)
+		{
+			e = (struct iwinfo_freqlist_entry *) &rv[i];
+
+			lua_newtable(L);
+
+			/* MHz */
+			lua_pushinteger(L, e->mhz);
+			lua_setfield(L, -2, "mhz");
+
+			/* Channel */
+			lua_pushinteger(L, e->channel);
+			lua_setfield(L, -2, "channel");
+
+			/* Restricted (DFS/TPC/Radar) */
+			lua_pushboolean(L, e->restricted);
+			lua_setfield(L, -2, "restricted");
+
+			lua_rawseti(L, -2, x);
+		}
+	}
+
+	return 1;
+}
+
 /* Wrapper for crypto settings */
 static int iwinfo_L_encryption(lua_State *L, int (*func)(const char *, char *))
 {
@@ -717,6 +755,7 @@ LUA_WRAP_STRUCT_OP(nl80211,assoclist)
 LUA_WRAP_STRUCT_OP(nl80211,txpwrlist)
 LUA_WRAP_STRUCT_OP(nl80211,scanlist)
 LUA_WRAP_STRUCT_OP(nl80211,freqlist)
+LUA_WRAP_STRUCT_OP(nl80211,no_dfs_freqlist)
 LUA_WRAP_STRUCT_OP(nl80211,countrylist)
 LUA_WRAP_STRUCT_OP(nl80211,hwmodelist)
 LUA_WRAP_STRUCT_OP(nl80211,htmodelist)
@@ -840,6 +879,7 @@ static const luaL_reg R_nl80211[] = {
 	LUA_REG(nl80211,txpwrlist),
 	LUA_REG(nl80211,scanlist),
 	LUA_REG(nl80211,freqlist),
+	LUA_REG(nl80211,no_dfs_freqlist),
 	LUA_REG(nl80211,countrylist),
 	LUA_REG(nl80211,hwmodelist),
 	LUA_REG(nl80211,htmodelist),
--- a/iwinfo_nl80211.c
+++ b/iwinfo_nl80211.c
@@ -2382,6 +2382,70 @@ static int nl80211_get_freqlist(const ch
 	return -1;
 }
 
+static int nl80211_get_no_dfs_freqlist_cb(struct nl_msg *msg, void *arg)
+{
+	int bands_remain, freqs_remain;
+
+	struct nl80211_array_buf *arr = arg;
+	struct iwinfo_freqlist_entry *e = arr->buf;
+
+	struct nlattr **attr = nl80211_parse(msg);
+	struct nlattr *bands[NL80211_BAND_ATTR_MAX + 1];
+	struct nlattr *freqs[NL80211_FREQUENCY_ATTR_MAX + 1];
+	struct nlattr *band, *freq;
+
+	nla_for_each_nested(band, attr[NL80211_ATTR_WIPHY_BANDS], bands_remain)
+	{
+		nla_parse(bands, NL80211_BAND_ATTR_MAX,
+		          nla_data(band), nla_len(band), NULL);
+
+		nla_for_each_nested(freq, bands[NL80211_BAND_ATTR_FREQS], freqs_remain)
+		{
+			nla_parse(freqs, NL80211_FREQUENCY_ATTR_MAX,
+			          nla_data(freq), nla_len(freq), NULL);
+
+			if (!freqs[NL80211_FREQUENCY_ATTR_FREQ] ||
+			    freqs[NL80211_FREQUENCY_ATTR_DISABLED] ||
+			    freqs[NL80211_FREQUENCY_ATTR_RADAR])
+				continue;
+
+			e->mhz = nla_get_u32(freqs[NL80211_FREQUENCY_ATTR_FREQ]);
+			e->channel = nl80211_freq2channel(e->mhz);
+
+			e->restricted = (
+				freqs[NL80211_FREQUENCY_ATTR_NO_IR] &&
+				!freqs[NL80211_FREQUENCY_ATTR_RADAR]
+			) ? 1 : 0;
+
+			e++;
+			arr->count++;
+		}
+	}
+
+	return NL_SKIP;
+}
+
+static int nl80211_get_no_dfs_freqlist(const char *ifname, char *buf, int *len)
+{
+	struct nl80211_msg_conveyor *req;
+	struct nl80211_array_buf arr = { .buf = buf, .count = 0 };
+
+	req = nl80211_msg(ifname, NL80211_CMD_GET_WIPHY, 0);
+	if (req)
+	{
+		nl80211_send(req, nl80211_get_no_dfs_freqlist_cb, &arr);
+		nl80211_free(req);
+	}
+
+	if (arr.count > 0)
+	{
+		*len = arr.count * sizeof(struct iwinfo_freqlist_entry);
+		return 0;
+	}
+
+	return -1;
+}
+
 static int nl80211_get_country_cb(struct nl_msg *msg, void *arg)
 {
 	char *buf = arg;
@@ -2745,6 +2809,7 @@ const struct iwinfo_ops nl80211_ops = {
 	.txpwrlist        = nl80211_get_txpwrlist,
 	.scanlist         = nl80211_get_scanlist,
 	.freqlist         = nl80211_get_freqlist,
+	.no_dfs_freqlist  = nl80211_get_no_dfs_freqlist,
 	.countrylist      = nl80211_get_countrylist,
 	.lookup_phy       = nl80211_lookup_phyname,
 	.close            = nl80211_close
